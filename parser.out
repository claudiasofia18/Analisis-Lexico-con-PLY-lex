Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APPEND
    BRACEL
    BRACER
    BREAK
    CAP
    CHAN
    CONST
    DEFAULT
    DEFER
    ELSE
    ERROR
    FALLTHROUGH
    FALSE
    FRONT
    FUNCION
    GO
    GOTO
    IF
    IMPORT
    INTERFACE
    LEN
    LIST
    MAP
    NEW
    PACKAGE
    PUSHBACK
    RETURN
    SELECT
    STRINGTYPE
    STRUCT
    TRUE
    TYPE

Grammar

Rule 0     S' -> main
Rule 1     main -> ejecutable
Rule 2     main -> ejecutable main
Rule 3     ejecutable -> estructuraControl
Rule 4     ejecutable -> impresion
Rule 5     ejecutable -> declaracion
Rule 6     ejecutable -> asignacion
Rule 7     ejecutable -> lectura
Rule 8     impresion -> impresionSencilla
Rule 9     impresion -> impresionBufio
Rule 10    impresion -> impresionFormato
Rule 11    lectura -> lecturaReader
Rule 12    lectura -> lecturaScanf
Rule 13    lectura -> lecturaSscanf
Rule 14    asignacion -> varShortAssign asignable
Rule 15    asignacion -> varAssign ASSIGN asignable
Rule 16    asignacion -> VARIABLE ASSIGN asignable
Rule 17    asignacion -> varAssign tipoDato ASSIGN asignable
Rule 18    declaracion -> varAssign tipoDato
Rule 19    asignable -> valor
Rule 20    asignable -> expresionMatematica
Rule 21    asignable -> condicion
Rule 22    estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR
Rule 23    estructuraControl -> FOR condicion LOCKL main LOCKR
Rule 24    estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
Rule 25    estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
Rule 26    estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
Rule 27    cases -> case
Rule 28    cases -> case cases
Rule 29    case -> CASE condicionCase COLON main
Rule 30    impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR
Rule 31    tipoImpresion -> FMT DOT PRINT
Rule 32    tipoImpresion -> FMT DOT PRINTLN
Rule 33    impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
Rule 34    impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
Rule 35    lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
Rule 36    lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
Rule 37    opcionLectura -> COMA opciones
Rule 38    opcionLectura -> COMA opciones opcionLectura
Rule 39    ampersand -> AMPERSON VARIABLE
Rule 40    lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
Rule 41    opcionesLectura -> opciones
Rule 42    opcionesLectura -> opciones COMA opcionesLectura
Rule 43    opciones -> STRING
Rule 44    opciones -> ampersand
Rule 45    declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
Rule 46    declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
Rule 47    varShortAssign -> VARIABLE SHORTASSIGN
Rule 48    varAssign -> VAR VARIABLE
Rule 49    condicionCase -> INTEGER
Rule 50    condicionCase -> VARIABLE
Rule 51    condicionCase -> condicion
Rule 52    condicion -> valor operadorComparacion valor
Rule 53    condicion -> valor operadorLogico valor
Rule 54    operadorComparacion -> EQUAL
Rule 55    operadorComparacion -> UNEQUAL
Rule 56    operadorComparacion -> GREATERTHAN
Rule 57    operadorComparacion -> SMALLERTHAN
Rule 58    operadorComparacion -> GREATEROREQUALTHAN
Rule 59    operadorComparacion -> SMALLEROREQUALTHAN
Rule 60    tipoDato -> INTTYPE
Rule 61    tipoDato -> FLOATTYPE
Rule 62    tipoDato -> BOOLEANTYPE
Rule 63    operadorLogico -> AND
Rule 64    operadorLogico -> OR
Rule 65    operadorLogico -> NOT
Rule 66    expresionMatematica -> factor operadorMatematico factor
Rule 67    operadorMatematico -> PLUS
Rule 68    operadorMatematico -> MINUS
Rule 69    operadorMatematico -> TIMES
Rule 70    operadorMatematico -> DIVIDE
Rule 71    operadorMatematico -> MODULE
Rule 72    valores -> valor
Rule 73    valores -> valor COMA valores
Rule 74    valor -> STRING
Rule 75    valor -> factor
Rule 76    factor -> VARIABLE
Rule 77    factor -> FLOAT
Rule 78    factor -> INTEGER
Rule 79    iterador -> VARIABLE INCREMENT
Rule 80    iterador -> VARIABLE DECREMENT

Terminals, with rules where they appear

AMPERSON             : 39
AND                  : 63
APPEND               : 
ASSIGN               : 15 16 17
BOOLEANTYPE          : 62
BRACEL               : 
BRACER               : 
BRACKETL             : 30 33 34 35 36 40 45 46
BRACKETR             : 30 33 34 35 36 40 45 46
BREAK                : 
BUFIO                : 45 46
CAP                  : 
CASE                 : 29
CHAN                 : 
COLON                : 29
COMA                 : 25 33 34 37 38 42 73
CONST                : 
DECREMENT            : 80
DEFAULT              : 
DEFER                : 
DIVIDE               : 70
DOT                  : 31 32 33 34 35 36 40 45 45 46 46
ELSE                 : 
EQUAL                : 54
ERROR                : 
FALLTHROUGH          : 
FALSE                : 
FLOAT                : 77
FLOATTYPE            : 61
FMT                  : 31 32 33 34 36 40
FOR                  : 23 24 25 26
FPRINT               : 33
FRONT                : 
FUNCION              : 
GO                   : 
GOTO                 : 
GREATEROREQUALTHAN   : 58
GREATERTHAN          : 56
IF                   : 
IMPORT               : 
INCREMENT            : 79
INTEGER              : 49 78
INTERFACE            : 
INTTYPE              : 60
LEN                  : 
LIST                 : 
LOCKL                : 22 23 24 25 26
LOCKR                : 22 23 24 25 26
MAP                  : 
MINUS                : 68
MODULE               : 71
NEW                  : 
NEWREADER            : 45
NEWWRITER            : 46
NOT                  : 65
OR                   : 64
OS                   : 45 46
PACKAGE              : 
PLUS                 : 67
PRINT                : 31
PRINTF               : 34
PRINTLN              : 32
PUSHBACK             : 
RANGE                : 25 26
READSTRING           : 35
RETURN               : 
SCANF                : 36
SELECT               : 
SEMICOLON            : 24 24
SHORTASSIGN          : 47
SMALLEROREQUALTHAN   : 59
SMALLERTHAN          : 57
SSCANF               : 40
STDIN                : 45
STDOUT               : 46
STRING               : 33 34 35 36 43 74
STRINGTYPE           : 
STRUCT               : 
SWITCH               : 22
TIMES                : 69
TRUE                 : 
TYPE                 : 
UNEQUAL              : 55
VAR                  : 48
VARIABLE             : 16 22 25 25 26 33 35 39 47 48 50 76 79 80
error                : 

Nonterminals, with rules where they appear

ampersand            : 44
asignable            : 14 15 16 17
asignacion           : 6 24
case                 : 27 28
cases                : 22 28
condicion            : 21 23 24 51
condicionCase        : 29
declaracion          : 5
ejecutable           : 1 2
estructuraControl    : 3
expresionMatematica  : 20
factor               : 66 66 75
impresion            : 4
impresionBufio       : 9
impresionFormato     : 10
impresionSencilla    : 8
iterador             : 24
lectura              : 7
lecturaReader        : 11
lecturaScanf         : 12
lecturaSscanf        : 13
main                 : 2 23 24 25 26 29 0
opcionLectura        : 36 38
opciones             : 37 38 41 42
opcionesLectura      : 40 42
operadorComparacion  : 52
operadorLogico       : 53
operadorMatematico   : 66
tipoDato             : 17 18
tipoImpresion        : 30
valor                : 19 52 52 53 53 72 73
valores              : 30 34 73
varAssign            : 15 17 18
varShortAssign       : 14 25 26 35 45 46

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (7) ejecutable -> . lectura
    (22) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (23) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (24) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (8) impresion -> . impresionSencilla
    (9) impresion -> . impresionBufio
    (10) impresion -> . impresionFormato
    (18) declaracion -> . varAssign tipoDato
    (45) declaracion -> . varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (11) lectura -> . lecturaReader
    (12) lectura -> . lecturaScanf
    (13) lectura -> . lecturaSscanf
    (30) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (33) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (48) varAssign -> . VAR VARIABLE
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (35) lecturaReader -> . varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (36) lecturaScanf -> . FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> . FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> . FMT DOT PRINT
    (32) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 8
    FOR             shift and go to state 10
    VARIABLE        shift and go to state 9
    FMT             shift and go to state 20
    VAR             shift and go to state 21

    main                           shift and go to state 1
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    lectura                        shift and go to state 7
    varShortAssign                 shift and go to state 11
    impresionSencilla              shift and go to state 12
    impresionBufio                 shift and go to state 13
    impresionFormato               shift and go to state 14
    varAssign                      shift and go to state 15
    lecturaReader                  shift and go to state 16
    lecturaScanf                   shift and go to state 17
    lecturaSscanf                  shift and go to state 18
    tipoImpresion                  shift and go to state 19

state 1

    (0) S' -> main .



state 2

    (1) main -> ejecutable .
    (2) main -> ejecutable . main
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (7) ejecutable -> . lectura
    (22) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (23) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (24) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (8) impresion -> . impresionSencilla
    (9) impresion -> . impresionBufio
    (10) impresion -> . impresionFormato
    (18) declaracion -> . varAssign tipoDato
    (45) declaracion -> . varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (11) lectura -> . lecturaReader
    (12) lectura -> . lecturaScanf
    (13) lectura -> . lecturaSscanf
    (30) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (33) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (48) varAssign -> . VAR VARIABLE
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (35) lecturaReader -> . varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (36) lecturaScanf -> . FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> . FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> . FMT DOT PRINT
    (32) tipoImpresion -> . FMT DOT PRINTLN

    $end            reduce using rule 1 (main -> ejecutable .)
    LOCKR           reduce using rule 1 (main -> ejecutable .)
    CASE            reduce using rule 1 (main -> ejecutable .)
    SWITCH          shift and go to state 8
    FOR             shift and go to state 10
    VARIABLE        shift and go to state 9
    FMT             shift and go to state 20
    VAR             shift and go to state 21

    ejecutable                     shift and go to state 2
    main                           shift and go to state 22
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    lectura                        shift and go to state 7
    varShortAssign                 shift and go to state 11
    impresionSencilla              shift and go to state 12
    impresionBufio                 shift and go to state 13
    impresionFormato               shift and go to state 14
    varAssign                      shift and go to state 15
    lecturaReader                  shift and go to state 16
    lecturaScanf                   shift and go to state 17
    lecturaSscanf                  shift and go to state 18
    tipoImpresion                  shift and go to state 19

state 3

    (3) ejecutable -> estructuraControl .

    SWITCH          reduce using rule 3 (ejecutable -> estructuraControl .)
    FOR             reduce using rule 3 (ejecutable -> estructuraControl .)
    VARIABLE        reduce using rule 3 (ejecutable -> estructuraControl .)
    FMT             reduce using rule 3 (ejecutable -> estructuraControl .)
    VAR             reduce using rule 3 (ejecutable -> estructuraControl .)
    $end            reduce using rule 3 (ejecutable -> estructuraControl .)
    LOCKR           reduce using rule 3 (ejecutable -> estructuraControl .)
    CASE            reduce using rule 3 (ejecutable -> estructuraControl .)


state 4

    (4) ejecutable -> impresion .

    SWITCH          reduce using rule 4 (ejecutable -> impresion .)
    FOR             reduce using rule 4 (ejecutable -> impresion .)
    VARIABLE        reduce using rule 4 (ejecutable -> impresion .)
    FMT             reduce using rule 4 (ejecutable -> impresion .)
    VAR             reduce using rule 4 (ejecutable -> impresion .)
    $end            reduce using rule 4 (ejecutable -> impresion .)
    LOCKR           reduce using rule 4 (ejecutable -> impresion .)
    CASE            reduce using rule 4 (ejecutable -> impresion .)


state 5

    (5) ejecutable -> declaracion .

    SWITCH          reduce using rule 5 (ejecutable -> declaracion .)
    FOR             reduce using rule 5 (ejecutable -> declaracion .)
    VARIABLE        reduce using rule 5 (ejecutable -> declaracion .)
    FMT             reduce using rule 5 (ejecutable -> declaracion .)
    VAR             reduce using rule 5 (ejecutable -> declaracion .)
    $end            reduce using rule 5 (ejecutable -> declaracion .)
    LOCKR           reduce using rule 5 (ejecutable -> declaracion .)
    CASE            reduce using rule 5 (ejecutable -> declaracion .)


state 6

    (6) ejecutable -> asignacion .

    SWITCH          reduce using rule 6 (ejecutable -> asignacion .)
    FOR             reduce using rule 6 (ejecutable -> asignacion .)
    VARIABLE        reduce using rule 6 (ejecutable -> asignacion .)
    FMT             reduce using rule 6 (ejecutable -> asignacion .)
    VAR             reduce using rule 6 (ejecutable -> asignacion .)
    $end            reduce using rule 6 (ejecutable -> asignacion .)
    LOCKR           reduce using rule 6 (ejecutable -> asignacion .)
    CASE            reduce using rule 6 (ejecutable -> asignacion .)


state 7

    (7) ejecutable -> lectura .

    SWITCH          reduce using rule 7 (ejecutable -> lectura .)
    FOR             reduce using rule 7 (ejecutable -> lectura .)
    VARIABLE        reduce using rule 7 (ejecutable -> lectura .)
    FMT             reduce using rule 7 (ejecutable -> lectura .)
    VAR             reduce using rule 7 (ejecutable -> lectura .)
    $end            reduce using rule 7 (ejecutable -> lectura .)
    LOCKR           reduce using rule 7 (ejecutable -> lectura .)
    CASE            reduce using rule 7 (ejecutable -> lectura .)


state 8

    (22) estructuraControl -> SWITCH . VARIABLE LOCKL cases LOCKR

    VARIABLE        shift and go to state 23


state 9

    (16) asignacion -> VARIABLE . ASSIGN asignable
    (47) varShortAssign -> VARIABLE . SHORTASSIGN

    ASSIGN          shift and go to state 24
    SHORTASSIGN     shift and go to state 25


state 10

    (23) estructuraControl -> FOR . condicion LOCKL main LOCKR
    (24) estructuraControl -> FOR . asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> FOR . VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> FOR . varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (74) valor -> . STRING
    (75) valor -> . factor
    (48) varAssign -> . VAR VARIABLE
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    VARIABLE        shift and go to state 28
    STRING          shift and go to state 32
    VAR             shift and go to state 21
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    condicion                      shift and go to state 26
    asignacion                     shift and go to state 27
    varShortAssign                 shift and go to state 29
    valor                          shift and go to state 30
    varAssign                      shift and go to state 31
    factor                         shift and go to state 33

state 11

    (45) declaracion -> varShortAssign . BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> varShortAssign . BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> varShortAssign . asignable
    (35) lecturaReader -> varShortAssign . VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (19) asignable -> . valor
    (20) asignable -> . expresionMatematica
    (21) asignable -> . condicion
    (74) valor -> . STRING
    (75) valor -> . factor
    (66) expresionMatematica -> . factor operadorMatematico factor
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    BUFIO           shift and go to state 36
    VARIABLE        shift and go to state 38
    STRING          shift and go to state 32
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    asignable                      shift and go to state 37
    valor                          shift and go to state 39
    expresionMatematica            shift and go to state 40
    condicion                      shift and go to state 41
    factor                         shift and go to state 42

state 12

    (8) impresion -> impresionSencilla .

    SWITCH          reduce using rule 8 (impresion -> impresionSencilla .)
    FOR             reduce using rule 8 (impresion -> impresionSencilla .)
    VARIABLE        reduce using rule 8 (impresion -> impresionSencilla .)
    FMT             reduce using rule 8 (impresion -> impresionSencilla .)
    VAR             reduce using rule 8 (impresion -> impresionSencilla .)
    $end            reduce using rule 8 (impresion -> impresionSencilla .)
    LOCKR           reduce using rule 8 (impresion -> impresionSencilla .)
    CASE            reduce using rule 8 (impresion -> impresionSencilla .)


state 13

    (9) impresion -> impresionBufio .

    SWITCH          reduce using rule 9 (impresion -> impresionBufio .)
    FOR             reduce using rule 9 (impresion -> impresionBufio .)
    VARIABLE        reduce using rule 9 (impresion -> impresionBufio .)
    FMT             reduce using rule 9 (impresion -> impresionBufio .)
    VAR             reduce using rule 9 (impresion -> impresionBufio .)
    $end            reduce using rule 9 (impresion -> impresionBufio .)
    LOCKR           reduce using rule 9 (impresion -> impresionBufio .)
    CASE            reduce using rule 9 (impresion -> impresionBufio .)


state 14

    (10) impresion -> impresionFormato .

    SWITCH          reduce using rule 10 (impresion -> impresionFormato .)
    FOR             reduce using rule 10 (impresion -> impresionFormato .)
    VARIABLE        reduce using rule 10 (impresion -> impresionFormato .)
    FMT             reduce using rule 10 (impresion -> impresionFormato .)
    VAR             reduce using rule 10 (impresion -> impresionFormato .)
    $end            reduce using rule 10 (impresion -> impresionFormato .)
    LOCKR           reduce using rule 10 (impresion -> impresionFormato .)
    CASE            reduce using rule 10 (impresion -> impresionFormato .)


state 15

    (18) declaracion -> varAssign . tipoDato
    (15) asignacion -> varAssign . ASSIGN asignable
    (17) asignacion -> varAssign . tipoDato ASSIGN asignable
    (60) tipoDato -> . INTTYPE
    (61) tipoDato -> . FLOATTYPE
    (62) tipoDato -> . BOOLEANTYPE

    ASSIGN          shift and go to state 44
    INTTYPE         shift and go to state 45
    FLOATTYPE       shift and go to state 46
    BOOLEANTYPE     shift and go to state 47

    tipoDato                       shift and go to state 43

state 16

    (11) lectura -> lecturaReader .

    SWITCH          reduce using rule 11 (lectura -> lecturaReader .)
    FOR             reduce using rule 11 (lectura -> lecturaReader .)
    VARIABLE        reduce using rule 11 (lectura -> lecturaReader .)
    FMT             reduce using rule 11 (lectura -> lecturaReader .)
    VAR             reduce using rule 11 (lectura -> lecturaReader .)
    $end            reduce using rule 11 (lectura -> lecturaReader .)
    LOCKR           reduce using rule 11 (lectura -> lecturaReader .)
    CASE            reduce using rule 11 (lectura -> lecturaReader .)


state 17

    (12) lectura -> lecturaScanf .

    SWITCH          reduce using rule 12 (lectura -> lecturaScanf .)
    FOR             reduce using rule 12 (lectura -> lecturaScanf .)
    VARIABLE        reduce using rule 12 (lectura -> lecturaScanf .)
    FMT             reduce using rule 12 (lectura -> lecturaScanf .)
    VAR             reduce using rule 12 (lectura -> lecturaScanf .)
    $end            reduce using rule 12 (lectura -> lecturaScanf .)
    LOCKR           reduce using rule 12 (lectura -> lecturaScanf .)
    CASE            reduce using rule 12 (lectura -> lecturaScanf .)


state 18

    (13) lectura -> lecturaSscanf .

    SWITCH          reduce using rule 13 (lectura -> lecturaSscanf .)
    FOR             reduce using rule 13 (lectura -> lecturaSscanf .)
    VARIABLE        reduce using rule 13 (lectura -> lecturaSscanf .)
    FMT             reduce using rule 13 (lectura -> lecturaSscanf .)
    VAR             reduce using rule 13 (lectura -> lecturaSscanf .)
    $end            reduce using rule 13 (lectura -> lecturaSscanf .)
    LOCKR           reduce using rule 13 (lectura -> lecturaSscanf .)
    CASE            reduce using rule 13 (lectura -> lecturaSscanf .)


state 19

    (30) impresionSencilla -> tipoImpresion . BRACKETL valores BRACKETR

    BRACKETL        shift and go to state 48


state 20

    (33) impresionBufio -> FMT . DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> FMT . DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (36) lecturaScanf -> FMT . DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> FMT . DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> FMT . DOT PRINT
    (32) tipoImpresion -> FMT . DOT PRINTLN

    DOT             shift and go to state 49


state 21

    (48) varAssign -> VAR . VARIABLE

    VARIABLE        shift and go to state 50


state 22

    (2) main -> ejecutable main .

    $end            reduce using rule 2 (main -> ejecutable main .)
    LOCKR           reduce using rule 2 (main -> ejecutable main .)
    CASE            reduce using rule 2 (main -> ejecutable main .)


state 23

    (22) estructuraControl -> SWITCH VARIABLE . LOCKL cases LOCKR

    LOCKL           shift and go to state 51


state 24

    (16) asignacion -> VARIABLE ASSIGN . asignable
    (19) asignable -> . valor
    (20) asignable -> . expresionMatematica
    (21) asignable -> . condicion
    (74) valor -> . STRING
    (75) valor -> . factor
    (66) expresionMatematica -> . factor operadorMatematico factor
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    asignable                      shift and go to state 53
    valor                          shift and go to state 39
    expresionMatematica            shift and go to state 40
    condicion                      shift and go to state 41
    factor                         shift and go to state 42

state 25

    (47) varShortAssign -> VARIABLE SHORTASSIGN .

    BUFIO           reduce using rule 47 (varShortAssign -> VARIABLE SHORTASSIGN .)
    VARIABLE        reduce using rule 47 (varShortAssign -> VARIABLE SHORTASSIGN .)
    STRING          reduce using rule 47 (varShortAssign -> VARIABLE SHORTASSIGN .)
    FLOAT           reduce using rule 47 (varShortAssign -> VARIABLE SHORTASSIGN .)
    INTEGER         reduce using rule 47 (varShortAssign -> VARIABLE SHORTASSIGN .)
    RANGE           reduce using rule 47 (varShortAssign -> VARIABLE SHORTASSIGN .)


state 26

    (23) estructuraControl -> FOR condicion . LOCKL main LOCKR

    LOCKL           shift and go to state 54


state 27

    (24) estructuraControl -> FOR asignacion . SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR

    SEMICOLON       shift and go to state 55


state 28

    (25) estructuraControl -> FOR VARIABLE . COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (16) asignacion -> VARIABLE . ASSIGN asignable
    (47) varShortAssign -> VARIABLE . SHORTASSIGN
    (76) factor -> VARIABLE .

    COMA            shift and go to state 56
    ASSIGN          shift and go to state 24
    SHORTASSIGN     shift and go to state 25
    EQUAL           reduce using rule 76 (factor -> VARIABLE .)
    UNEQUAL         reduce using rule 76 (factor -> VARIABLE .)
    GREATERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    AND             reduce using rule 76 (factor -> VARIABLE .)
    OR              reduce using rule 76 (factor -> VARIABLE .)
    NOT             reduce using rule 76 (factor -> VARIABLE .)


state 29

    (26) estructuraControl -> FOR varShortAssign . RANGE VARIABLE LOCKL main LOCKR
    (14) asignacion -> varShortAssign . asignable
    (19) asignable -> . valor
    (20) asignable -> . expresionMatematica
    (21) asignable -> . condicion
    (74) valor -> . STRING
    (75) valor -> . factor
    (66) expresionMatematica -> . factor operadorMatematico factor
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    RANGE           shift and go to state 57
    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    asignable                      shift and go to state 37
    valor                          shift and go to state 39
    expresionMatematica            shift and go to state 40
    condicion                      shift and go to state 41
    factor                         shift and go to state 42

state 30

    (52) condicion -> valor . operadorComparacion valor
    (53) condicion -> valor . operadorLogico valor
    (54) operadorComparacion -> . EQUAL
    (55) operadorComparacion -> . UNEQUAL
    (56) operadorComparacion -> . GREATERTHAN
    (57) operadorComparacion -> . SMALLERTHAN
    (58) operadorComparacion -> . GREATEROREQUALTHAN
    (59) operadorComparacion -> . SMALLEROREQUALTHAN
    (63) operadorLogico -> . AND
    (64) operadorLogico -> . OR
    (65) operadorLogico -> . NOT

    EQUAL           shift and go to state 60
    UNEQUAL         shift and go to state 61
    GREATERTHAN     shift and go to state 62
    SMALLERTHAN     shift and go to state 63
    GREATEROREQUALTHAN shift and go to state 64
    SMALLEROREQUALTHAN shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    NOT             shift and go to state 68

    operadorComparacion            shift and go to state 58
    operadorLogico                 shift and go to state 59

state 31

    (15) asignacion -> varAssign . ASSIGN asignable
    (17) asignacion -> varAssign . tipoDato ASSIGN asignable
    (60) tipoDato -> . INTTYPE
    (61) tipoDato -> . FLOATTYPE
    (62) tipoDato -> . BOOLEANTYPE

    ASSIGN          shift and go to state 44
    INTTYPE         shift and go to state 45
    FLOATTYPE       shift and go to state 46
    BOOLEANTYPE     shift and go to state 47

    tipoDato                       shift and go to state 69

state 32

    (74) valor -> STRING .

    EQUAL           reduce using rule 74 (valor -> STRING .)
    UNEQUAL         reduce using rule 74 (valor -> STRING .)
    GREATERTHAN     reduce using rule 74 (valor -> STRING .)
    SMALLERTHAN     reduce using rule 74 (valor -> STRING .)
    GREATEROREQUALTHAN reduce using rule 74 (valor -> STRING .)
    SMALLEROREQUALTHAN reduce using rule 74 (valor -> STRING .)
    AND             reduce using rule 74 (valor -> STRING .)
    OR              reduce using rule 74 (valor -> STRING .)
    NOT             reduce using rule 74 (valor -> STRING .)
    SWITCH          reduce using rule 74 (valor -> STRING .)
    FOR             reduce using rule 74 (valor -> STRING .)
    VARIABLE        reduce using rule 74 (valor -> STRING .)
    FMT             reduce using rule 74 (valor -> STRING .)
    VAR             reduce using rule 74 (valor -> STRING .)
    $end            reduce using rule 74 (valor -> STRING .)
    LOCKR           reduce using rule 74 (valor -> STRING .)
    CASE            reduce using rule 74 (valor -> STRING .)
    SEMICOLON       reduce using rule 74 (valor -> STRING .)
    COMA            reduce using rule 74 (valor -> STRING .)
    BRACKETR        reduce using rule 74 (valor -> STRING .)
    LOCKL           reduce using rule 74 (valor -> STRING .)
    COLON           reduce using rule 74 (valor -> STRING .)


state 33

    (75) valor -> factor .

    EQUAL           reduce using rule 75 (valor -> factor .)
    UNEQUAL         reduce using rule 75 (valor -> factor .)
    GREATERTHAN     reduce using rule 75 (valor -> factor .)
    SMALLERTHAN     reduce using rule 75 (valor -> factor .)
    GREATEROREQUALTHAN reduce using rule 75 (valor -> factor .)
    SMALLEROREQUALTHAN reduce using rule 75 (valor -> factor .)
    AND             reduce using rule 75 (valor -> factor .)
    OR              reduce using rule 75 (valor -> factor .)
    NOT             reduce using rule 75 (valor -> factor .)
    COMA            reduce using rule 75 (valor -> factor .)
    BRACKETR        reduce using rule 75 (valor -> factor .)
    LOCKL           reduce using rule 75 (valor -> factor .)
    SWITCH          reduce using rule 75 (valor -> factor .)
    FOR             reduce using rule 75 (valor -> factor .)
    VARIABLE        reduce using rule 75 (valor -> factor .)
    FMT             reduce using rule 75 (valor -> factor .)
    VAR             reduce using rule 75 (valor -> factor .)
    $end            reduce using rule 75 (valor -> factor .)
    LOCKR           reduce using rule 75 (valor -> factor .)
    CASE            reduce using rule 75 (valor -> factor .)
    SEMICOLON       reduce using rule 75 (valor -> factor .)
    COLON           reduce using rule 75 (valor -> factor .)


state 34

    (77) factor -> FLOAT .

    EQUAL           reduce using rule 77 (factor -> FLOAT .)
    UNEQUAL         reduce using rule 77 (factor -> FLOAT .)
    GREATERTHAN     reduce using rule 77 (factor -> FLOAT .)
    SMALLERTHAN     reduce using rule 77 (factor -> FLOAT .)
    GREATEROREQUALTHAN reduce using rule 77 (factor -> FLOAT .)
    SMALLEROREQUALTHAN reduce using rule 77 (factor -> FLOAT .)
    AND             reduce using rule 77 (factor -> FLOAT .)
    OR              reduce using rule 77 (factor -> FLOAT .)
    NOT             reduce using rule 77 (factor -> FLOAT .)
    PLUS            reduce using rule 77 (factor -> FLOAT .)
    MINUS           reduce using rule 77 (factor -> FLOAT .)
    TIMES           reduce using rule 77 (factor -> FLOAT .)
    DIVIDE          reduce using rule 77 (factor -> FLOAT .)
    MODULE          reduce using rule 77 (factor -> FLOAT .)
    SWITCH          reduce using rule 77 (factor -> FLOAT .)
    FOR             reduce using rule 77 (factor -> FLOAT .)
    VARIABLE        reduce using rule 77 (factor -> FLOAT .)
    FMT             reduce using rule 77 (factor -> FLOAT .)
    VAR             reduce using rule 77 (factor -> FLOAT .)
    $end            reduce using rule 77 (factor -> FLOAT .)
    LOCKR           reduce using rule 77 (factor -> FLOAT .)
    CASE            reduce using rule 77 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 77 (factor -> FLOAT .)
    COMA            reduce using rule 77 (factor -> FLOAT .)
    BRACKETR        reduce using rule 77 (factor -> FLOAT .)
    LOCKL           reduce using rule 77 (factor -> FLOAT .)
    COLON           reduce using rule 77 (factor -> FLOAT .)


state 35

    (78) factor -> INTEGER .

    EQUAL           reduce using rule 78 (factor -> INTEGER .)
    UNEQUAL         reduce using rule 78 (factor -> INTEGER .)
    GREATERTHAN     reduce using rule 78 (factor -> INTEGER .)
    SMALLERTHAN     reduce using rule 78 (factor -> INTEGER .)
    GREATEROREQUALTHAN reduce using rule 78 (factor -> INTEGER .)
    SMALLEROREQUALTHAN reduce using rule 78 (factor -> INTEGER .)
    AND             reduce using rule 78 (factor -> INTEGER .)
    OR              reduce using rule 78 (factor -> INTEGER .)
    NOT             reduce using rule 78 (factor -> INTEGER .)
    PLUS            reduce using rule 78 (factor -> INTEGER .)
    MINUS           reduce using rule 78 (factor -> INTEGER .)
    TIMES           reduce using rule 78 (factor -> INTEGER .)
    DIVIDE          reduce using rule 78 (factor -> INTEGER .)
    MODULE          reduce using rule 78 (factor -> INTEGER .)
    SWITCH          reduce using rule 78 (factor -> INTEGER .)
    FOR             reduce using rule 78 (factor -> INTEGER .)
    VARIABLE        reduce using rule 78 (factor -> INTEGER .)
    FMT             reduce using rule 78 (factor -> INTEGER .)
    VAR             reduce using rule 78 (factor -> INTEGER .)
    $end            reduce using rule 78 (factor -> INTEGER .)
    LOCKR           reduce using rule 78 (factor -> INTEGER .)
    CASE            reduce using rule 78 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 78 (factor -> INTEGER .)
    COMA            reduce using rule 78 (factor -> INTEGER .)
    BRACKETR        reduce using rule 78 (factor -> INTEGER .)
    LOCKL           reduce using rule 78 (factor -> INTEGER .)
    COLON           reduce using rule 78 (factor -> INTEGER .)


state 36

    (45) declaracion -> varShortAssign BUFIO . DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> varShortAssign BUFIO . DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR

    DOT             shift and go to state 70


state 37

    (14) asignacion -> varShortAssign asignable .

    SWITCH          reduce using rule 14 (asignacion -> varShortAssign asignable .)
    FOR             reduce using rule 14 (asignacion -> varShortAssign asignable .)
    VARIABLE        reduce using rule 14 (asignacion -> varShortAssign asignable .)
    FMT             reduce using rule 14 (asignacion -> varShortAssign asignable .)
    VAR             reduce using rule 14 (asignacion -> varShortAssign asignable .)
    $end            reduce using rule 14 (asignacion -> varShortAssign asignable .)
    LOCKR           reduce using rule 14 (asignacion -> varShortAssign asignable .)
    CASE            reduce using rule 14 (asignacion -> varShortAssign asignable .)
    SEMICOLON       reduce using rule 14 (asignacion -> varShortAssign asignable .)


state 38

    (35) lecturaReader -> varShortAssign VARIABLE . DOT READSTRING BRACKETL STRING BRACKETR
    (76) factor -> VARIABLE .

    DOT             shift and go to state 71
    PLUS            reduce using rule 76 (factor -> VARIABLE .)
    MINUS           reduce using rule 76 (factor -> VARIABLE .)
    TIMES           reduce using rule 76 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 76 (factor -> VARIABLE .)
    MODULE          reduce using rule 76 (factor -> VARIABLE .)
    EQUAL           reduce using rule 76 (factor -> VARIABLE .)
    UNEQUAL         reduce using rule 76 (factor -> VARIABLE .)
    GREATERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    AND             reduce using rule 76 (factor -> VARIABLE .)
    OR              reduce using rule 76 (factor -> VARIABLE .)
    NOT             reduce using rule 76 (factor -> VARIABLE .)
    SWITCH          reduce using rule 76 (factor -> VARIABLE .)
    FOR             reduce using rule 76 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 76 (factor -> VARIABLE .)
    FMT             reduce using rule 76 (factor -> VARIABLE .)
    VAR             reduce using rule 76 (factor -> VARIABLE .)
    $end            reduce using rule 76 (factor -> VARIABLE .)
    LOCKR           reduce using rule 76 (factor -> VARIABLE .)
    CASE            reduce using rule 76 (factor -> VARIABLE .)


state 39

    (19) asignable -> valor .
    (52) condicion -> valor . operadorComparacion valor
    (53) condicion -> valor . operadorLogico valor
    (54) operadorComparacion -> . EQUAL
    (55) operadorComparacion -> . UNEQUAL
    (56) operadorComparacion -> . GREATERTHAN
    (57) operadorComparacion -> . SMALLERTHAN
    (58) operadorComparacion -> . GREATEROREQUALTHAN
    (59) operadorComparacion -> . SMALLEROREQUALTHAN
    (63) operadorLogico -> . AND
    (64) operadorLogico -> . OR
    (65) operadorLogico -> . NOT

    SWITCH          reduce using rule 19 (asignable -> valor .)
    FOR             reduce using rule 19 (asignable -> valor .)
    VARIABLE        reduce using rule 19 (asignable -> valor .)
    FMT             reduce using rule 19 (asignable -> valor .)
    VAR             reduce using rule 19 (asignable -> valor .)
    $end            reduce using rule 19 (asignable -> valor .)
    LOCKR           reduce using rule 19 (asignable -> valor .)
    CASE            reduce using rule 19 (asignable -> valor .)
    SEMICOLON       reduce using rule 19 (asignable -> valor .)
    EQUAL           shift and go to state 60
    UNEQUAL         shift and go to state 61
    GREATERTHAN     shift and go to state 62
    SMALLERTHAN     shift and go to state 63
    GREATEROREQUALTHAN shift and go to state 64
    SMALLEROREQUALTHAN shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    NOT             shift and go to state 68

    operadorComparacion            shift and go to state 58
    operadorLogico                 shift and go to state 59

state 40

    (20) asignable -> expresionMatematica .

    SWITCH          reduce using rule 20 (asignable -> expresionMatematica .)
    FOR             reduce using rule 20 (asignable -> expresionMatematica .)
    VARIABLE        reduce using rule 20 (asignable -> expresionMatematica .)
    FMT             reduce using rule 20 (asignable -> expresionMatematica .)
    VAR             reduce using rule 20 (asignable -> expresionMatematica .)
    $end            reduce using rule 20 (asignable -> expresionMatematica .)
    LOCKR           reduce using rule 20 (asignable -> expresionMatematica .)
    CASE            reduce using rule 20 (asignable -> expresionMatematica .)
    SEMICOLON       reduce using rule 20 (asignable -> expresionMatematica .)


state 41

    (21) asignable -> condicion .

    SWITCH          reduce using rule 21 (asignable -> condicion .)
    FOR             reduce using rule 21 (asignable -> condicion .)
    VARIABLE        reduce using rule 21 (asignable -> condicion .)
    FMT             reduce using rule 21 (asignable -> condicion .)
    VAR             reduce using rule 21 (asignable -> condicion .)
    $end            reduce using rule 21 (asignable -> condicion .)
    LOCKR           reduce using rule 21 (asignable -> condicion .)
    CASE            reduce using rule 21 (asignable -> condicion .)
    SEMICOLON       reduce using rule 21 (asignable -> condicion .)


state 42

    (75) valor -> factor .
    (66) expresionMatematica -> factor . operadorMatematico factor
    (67) operadorMatematico -> . PLUS
    (68) operadorMatematico -> . MINUS
    (69) operadorMatematico -> . TIMES
    (70) operadorMatematico -> . DIVIDE
    (71) operadorMatematico -> . MODULE

    EQUAL           reduce using rule 75 (valor -> factor .)
    UNEQUAL         reduce using rule 75 (valor -> factor .)
    GREATERTHAN     reduce using rule 75 (valor -> factor .)
    SMALLERTHAN     reduce using rule 75 (valor -> factor .)
    GREATEROREQUALTHAN reduce using rule 75 (valor -> factor .)
    SMALLEROREQUALTHAN reduce using rule 75 (valor -> factor .)
    AND             reduce using rule 75 (valor -> factor .)
    OR              reduce using rule 75 (valor -> factor .)
    NOT             reduce using rule 75 (valor -> factor .)
    SWITCH          reduce using rule 75 (valor -> factor .)
    FOR             reduce using rule 75 (valor -> factor .)
    VARIABLE        reduce using rule 75 (valor -> factor .)
    FMT             reduce using rule 75 (valor -> factor .)
    VAR             reduce using rule 75 (valor -> factor .)
    $end            reduce using rule 75 (valor -> factor .)
    LOCKR           reduce using rule 75 (valor -> factor .)
    CASE            reduce using rule 75 (valor -> factor .)
    SEMICOLON       reduce using rule 75 (valor -> factor .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULE          shift and go to state 77

    operadorMatematico             shift and go to state 72

state 43

    (18) declaracion -> varAssign tipoDato .
    (17) asignacion -> varAssign tipoDato . ASSIGN asignable

    SWITCH          reduce using rule 18 (declaracion -> varAssign tipoDato .)
    FOR             reduce using rule 18 (declaracion -> varAssign tipoDato .)
    VARIABLE        reduce using rule 18 (declaracion -> varAssign tipoDato .)
    FMT             reduce using rule 18 (declaracion -> varAssign tipoDato .)
    VAR             reduce using rule 18 (declaracion -> varAssign tipoDato .)
    $end            reduce using rule 18 (declaracion -> varAssign tipoDato .)
    LOCKR           reduce using rule 18 (declaracion -> varAssign tipoDato .)
    CASE            reduce using rule 18 (declaracion -> varAssign tipoDato .)
    ASSIGN          shift and go to state 78


state 44

    (15) asignacion -> varAssign ASSIGN . asignable
    (19) asignable -> . valor
    (20) asignable -> . expresionMatematica
    (21) asignable -> . condicion
    (74) valor -> . STRING
    (75) valor -> . factor
    (66) expresionMatematica -> . factor operadorMatematico factor
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    asignable                      shift and go to state 79
    valor                          shift and go to state 39
    expresionMatematica            shift and go to state 40
    condicion                      shift and go to state 41
    factor                         shift and go to state 42

state 45

    (60) tipoDato -> INTTYPE .

    ASSIGN          reduce using rule 60 (tipoDato -> INTTYPE .)
    SWITCH          reduce using rule 60 (tipoDato -> INTTYPE .)
    FOR             reduce using rule 60 (tipoDato -> INTTYPE .)
    VARIABLE        reduce using rule 60 (tipoDato -> INTTYPE .)
    FMT             reduce using rule 60 (tipoDato -> INTTYPE .)
    VAR             reduce using rule 60 (tipoDato -> INTTYPE .)
    $end            reduce using rule 60 (tipoDato -> INTTYPE .)
    LOCKR           reduce using rule 60 (tipoDato -> INTTYPE .)
    CASE            reduce using rule 60 (tipoDato -> INTTYPE .)


state 46

    (61) tipoDato -> FLOATTYPE .

    ASSIGN          reduce using rule 61 (tipoDato -> FLOATTYPE .)
    SWITCH          reduce using rule 61 (tipoDato -> FLOATTYPE .)
    FOR             reduce using rule 61 (tipoDato -> FLOATTYPE .)
    VARIABLE        reduce using rule 61 (tipoDato -> FLOATTYPE .)
    FMT             reduce using rule 61 (tipoDato -> FLOATTYPE .)
    VAR             reduce using rule 61 (tipoDato -> FLOATTYPE .)
    $end            reduce using rule 61 (tipoDato -> FLOATTYPE .)
    LOCKR           reduce using rule 61 (tipoDato -> FLOATTYPE .)
    CASE            reduce using rule 61 (tipoDato -> FLOATTYPE .)


state 47

    (62) tipoDato -> BOOLEANTYPE .

    ASSIGN          reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    SWITCH          reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    FOR             reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    VARIABLE        reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    FMT             reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    VAR             reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    $end            reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    LOCKR           reduce using rule 62 (tipoDato -> BOOLEANTYPE .)
    CASE            reduce using rule 62 (tipoDato -> BOOLEANTYPE .)


state 48

    (30) impresionSencilla -> tipoImpresion BRACKETL . valores BRACKETR
    (72) valores -> . valor
    (73) valores -> . valor COMA valores
    (74) valor -> . STRING
    (75) valor -> . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    valores                        shift and go to state 80
    valor                          shift and go to state 81
    factor                         shift and go to state 33

state 49

    (33) impresionBufio -> FMT DOT . FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> FMT DOT . PRINTF BRACKETL STRING COMA valores BRACKETR
    (36) lecturaScanf -> FMT DOT . SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> FMT DOT . SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> FMT DOT . PRINT
    (32) tipoImpresion -> FMT DOT . PRINTLN

    FPRINT          shift and go to state 82
    PRINTF          shift and go to state 83
    SCANF           shift and go to state 84
    SSCANF          shift and go to state 85
    PRINT           shift and go to state 86
    PRINTLN         shift and go to state 87


state 50

    (48) varAssign -> VAR VARIABLE .

    ASSIGN          reduce using rule 48 (varAssign -> VAR VARIABLE .)
    INTTYPE         reduce using rule 48 (varAssign -> VAR VARIABLE .)
    FLOATTYPE       reduce using rule 48 (varAssign -> VAR VARIABLE .)
    BOOLEANTYPE     reduce using rule 48 (varAssign -> VAR VARIABLE .)


state 51

    (22) estructuraControl -> SWITCH VARIABLE LOCKL . cases LOCKR
    (27) cases -> . case
    (28) cases -> . case cases
    (29) case -> . CASE condicionCase COLON main

    CASE            shift and go to state 90

    cases                          shift and go to state 88
    case                           shift and go to state 89

state 52

    (76) factor -> VARIABLE .

    PLUS            reduce using rule 76 (factor -> VARIABLE .)
    MINUS           reduce using rule 76 (factor -> VARIABLE .)
    TIMES           reduce using rule 76 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 76 (factor -> VARIABLE .)
    MODULE          reduce using rule 76 (factor -> VARIABLE .)
    EQUAL           reduce using rule 76 (factor -> VARIABLE .)
    UNEQUAL         reduce using rule 76 (factor -> VARIABLE .)
    GREATERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    AND             reduce using rule 76 (factor -> VARIABLE .)
    OR              reduce using rule 76 (factor -> VARIABLE .)
    NOT             reduce using rule 76 (factor -> VARIABLE .)
    SWITCH          reduce using rule 76 (factor -> VARIABLE .)
    FOR             reduce using rule 76 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 76 (factor -> VARIABLE .)
    FMT             reduce using rule 76 (factor -> VARIABLE .)
    VAR             reduce using rule 76 (factor -> VARIABLE .)
    $end            reduce using rule 76 (factor -> VARIABLE .)
    LOCKR           reduce using rule 76 (factor -> VARIABLE .)
    CASE            reduce using rule 76 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 76 (factor -> VARIABLE .)
    COMA            reduce using rule 76 (factor -> VARIABLE .)
    BRACKETR        reduce using rule 76 (factor -> VARIABLE .)
    LOCKL           reduce using rule 76 (factor -> VARIABLE .)
    COLON           reduce using rule 76 (factor -> VARIABLE .)


state 53

    (16) asignacion -> VARIABLE ASSIGN asignable .

    SWITCH          reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    FOR             reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    VARIABLE        reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    FMT             reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    VAR             reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    $end            reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    LOCKR           reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    CASE            reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)
    SEMICOLON       reduce using rule 16 (asignacion -> VARIABLE ASSIGN asignable .)


state 54

    (23) estructuraControl -> FOR condicion LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (7) ejecutable -> . lectura
    (22) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (23) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (24) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (8) impresion -> . impresionSencilla
    (9) impresion -> . impresionBufio
    (10) impresion -> . impresionFormato
    (18) declaracion -> . varAssign tipoDato
    (45) declaracion -> . varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (11) lectura -> . lecturaReader
    (12) lectura -> . lecturaScanf
    (13) lectura -> . lecturaSscanf
    (30) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (33) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (48) varAssign -> . VAR VARIABLE
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (35) lecturaReader -> . varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (36) lecturaScanf -> . FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> . FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> . FMT DOT PRINT
    (32) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 8
    FOR             shift and go to state 10
    VARIABLE        shift and go to state 9
    FMT             shift and go to state 20
    VAR             shift and go to state 21

    main                           shift and go to state 91
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    lectura                        shift and go to state 7
    varShortAssign                 shift and go to state 11
    impresionSencilla              shift and go to state 12
    impresionBufio                 shift and go to state 13
    impresionFormato               shift and go to state 14
    varAssign                      shift and go to state 15
    lecturaReader                  shift and go to state 16
    lecturaScanf                   shift and go to state 17
    lecturaSscanf                  shift and go to state 18
    tipoImpresion                  shift and go to state 19

state 55

    (24) estructuraControl -> FOR asignacion SEMICOLON . condicion SEMICOLON iterador LOCKL main LOCKR
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (74) valor -> . STRING
    (75) valor -> . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    condicion                      shift and go to state 92
    valor                          shift and go to state 30
    factor                         shift and go to state 33

state 56

    (25) estructuraControl -> FOR VARIABLE COMA . varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (47) varShortAssign -> . VARIABLE SHORTASSIGN

    VARIABLE        shift and go to state 93

    varShortAssign                 shift and go to state 94

state 57

    (26) estructuraControl -> FOR varShortAssign RANGE . VARIABLE LOCKL main LOCKR

    VARIABLE        shift and go to state 95


state 58

    (52) condicion -> valor operadorComparacion . valor
    (74) valor -> . STRING
    (75) valor -> . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    valor                          shift and go to state 96
    factor                         shift and go to state 33

state 59

    (53) condicion -> valor operadorLogico . valor
    (74) valor -> . STRING
    (75) valor -> . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    valor                          shift and go to state 97
    factor                         shift and go to state 33

state 60

    (54) operadorComparacion -> EQUAL .

    STRING          reduce using rule 54 (operadorComparacion -> EQUAL .)
    VARIABLE        reduce using rule 54 (operadorComparacion -> EQUAL .)
    FLOAT           reduce using rule 54 (operadorComparacion -> EQUAL .)
    INTEGER         reduce using rule 54 (operadorComparacion -> EQUAL .)


state 61

    (55) operadorComparacion -> UNEQUAL .

    STRING          reduce using rule 55 (operadorComparacion -> UNEQUAL .)
    VARIABLE        reduce using rule 55 (operadorComparacion -> UNEQUAL .)
    FLOAT           reduce using rule 55 (operadorComparacion -> UNEQUAL .)
    INTEGER         reduce using rule 55 (operadorComparacion -> UNEQUAL .)


state 62

    (56) operadorComparacion -> GREATERTHAN .

    STRING          reduce using rule 56 (operadorComparacion -> GREATERTHAN .)
    VARIABLE        reduce using rule 56 (operadorComparacion -> GREATERTHAN .)
    FLOAT           reduce using rule 56 (operadorComparacion -> GREATERTHAN .)
    INTEGER         reduce using rule 56 (operadorComparacion -> GREATERTHAN .)


state 63

    (57) operadorComparacion -> SMALLERTHAN .

    STRING          reduce using rule 57 (operadorComparacion -> SMALLERTHAN .)
    VARIABLE        reduce using rule 57 (operadorComparacion -> SMALLERTHAN .)
    FLOAT           reduce using rule 57 (operadorComparacion -> SMALLERTHAN .)
    INTEGER         reduce using rule 57 (operadorComparacion -> SMALLERTHAN .)


state 64

    (58) operadorComparacion -> GREATEROREQUALTHAN .

    STRING          reduce using rule 58 (operadorComparacion -> GREATEROREQUALTHAN .)
    VARIABLE        reduce using rule 58 (operadorComparacion -> GREATEROREQUALTHAN .)
    FLOAT           reduce using rule 58 (operadorComparacion -> GREATEROREQUALTHAN .)
    INTEGER         reduce using rule 58 (operadorComparacion -> GREATEROREQUALTHAN .)


state 65

    (59) operadorComparacion -> SMALLEROREQUALTHAN .

    STRING          reduce using rule 59 (operadorComparacion -> SMALLEROREQUALTHAN .)
    VARIABLE        reduce using rule 59 (operadorComparacion -> SMALLEROREQUALTHAN .)
    FLOAT           reduce using rule 59 (operadorComparacion -> SMALLEROREQUALTHAN .)
    INTEGER         reduce using rule 59 (operadorComparacion -> SMALLEROREQUALTHAN .)


state 66

    (63) operadorLogico -> AND .

    STRING          reduce using rule 63 (operadorLogico -> AND .)
    VARIABLE        reduce using rule 63 (operadorLogico -> AND .)
    FLOAT           reduce using rule 63 (operadorLogico -> AND .)
    INTEGER         reduce using rule 63 (operadorLogico -> AND .)


state 67

    (64) operadorLogico -> OR .

    STRING          reduce using rule 64 (operadorLogico -> OR .)
    VARIABLE        reduce using rule 64 (operadorLogico -> OR .)
    FLOAT           reduce using rule 64 (operadorLogico -> OR .)
    INTEGER         reduce using rule 64 (operadorLogico -> OR .)


state 68

    (65) operadorLogico -> NOT .

    STRING          reduce using rule 65 (operadorLogico -> NOT .)
    VARIABLE        reduce using rule 65 (operadorLogico -> NOT .)
    FLOAT           reduce using rule 65 (operadorLogico -> NOT .)
    INTEGER         reduce using rule 65 (operadorLogico -> NOT .)


state 69

    (17) asignacion -> varAssign tipoDato . ASSIGN asignable

    ASSIGN          shift and go to state 78


state 70

    (45) declaracion -> varShortAssign BUFIO DOT . NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> varShortAssign BUFIO DOT . NEWWRITER BRACKETL OS DOT STDOUT BRACKETR

    NEWREADER       shift and go to state 98
    NEWWRITER       shift and go to state 99


state 71

    (35) lecturaReader -> varShortAssign VARIABLE DOT . READSTRING BRACKETL STRING BRACKETR

    READSTRING      shift and go to state 100


state 72

    (66) expresionMatematica -> factor operadorMatematico . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    factor                         shift and go to state 101

state 73

    (67) operadorMatematico -> PLUS .

    VARIABLE        reduce using rule 67 (operadorMatematico -> PLUS .)
    FLOAT           reduce using rule 67 (operadorMatematico -> PLUS .)
    INTEGER         reduce using rule 67 (operadorMatematico -> PLUS .)


state 74

    (68) operadorMatematico -> MINUS .

    VARIABLE        reduce using rule 68 (operadorMatematico -> MINUS .)
    FLOAT           reduce using rule 68 (operadorMatematico -> MINUS .)
    INTEGER         reduce using rule 68 (operadorMatematico -> MINUS .)


state 75

    (69) operadorMatematico -> TIMES .

    VARIABLE        reduce using rule 69 (operadorMatematico -> TIMES .)
    FLOAT           reduce using rule 69 (operadorMatematico -> TIMES .)
    INTEGER         reduce using rule 69 (operadorMatematico -> TIMES .)


state 76

    (70) operadorMatematico -> DIVIDE .

    VARIABLE        reduce using rule 70 (operadorMatematico -> DIVIDE .)
    FLOAT           reduce using rule 70 (operadorMatematico -> DIVIDE .)
    INTEGER         reduce using rule 70 (operadorMatematico -> DIVIDE .)


state 77

    (71) operadorMatematico -> MODULE .

    VARIABLE        reduce using rule 71 (operadorMatematico -> MODULE .)
    FLOAT           reduce using rule 71 (operadorMatematico -> MODULE .)
    INTEGER         reduce using rule 71 (operadorMatematico -> MODULE .)


state 78

    (17) asignacion -> varAssign tipoDato ASSIGN . asignable
    (19) asignable -> . valor
    (20) asignable -> . expresionMatematica
    (21) asignable -> . condicion
    (74) valor -> . STRING
    (75) valor -> . factor
    (66) expresionMatematica -> . factor operadorMatematico factor
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    asignable                      shift and go to state 102
    valor                          shift and go to state 39
    expresionMatematica            shift and go to state 40
    condicion                      shift and go to state 41
    factor                         shift and go to state 42

state 79

    (15) asignacion -> varAssign ASSIGN asignable .

    SWITCH          reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    FOR             reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    VARIABLE        reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    FMT             reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    VAR             reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    $end            reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    LOCKR           reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    CASE            reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)
    SEMICOLON       reduce using rule 15 (asignacion -> varAssign ASSIGN asignable .)


state 80

    (30) impresionSencilla -> tipoImpresion BRACKETL valores . BRACKETR

    BRACKETR        shift and go to state 103


state 81

    (72) valores -> valor .
    (73) valores -> valor . COMA valores

    BRACKETR        reduce using rule 72 (valores -> valor .)
    COMA            shift and go to state 104


state 82

    (33) impresionBufio -> FMT DOT FPRINT . BRACKETL VARIABLE COMA STRING BRACKETR

    BRACKETL        shift and go to state 105


state 83

    (34) impresionFormato -> FMT DOT PRINTF . BRACKETL STRING COMA valores BRACKETR

    BRACKETL        shift and go to state 106


state 84

    (36) lecturaScanf -> FMT DOT SCANF . BRACKETL STRING opcionLectura BRACKETR

    BRACKETL        shift and go to state 107


state 85

    (40) lecturaSscanf -> FMT DOT SSCANF . BRACKETL opcionesLectura BRACKETR

    BRACKETL        shift and go to state 108


state 86

    (31) tipoImpresion -> FMT DOT PRINT .

    BRACKETL        reduce using rule 31 (tipoImpresion -> FMT DOT PRINT .)


state 87

    (32) tipoImpresion -> FMT DOT PRINTLN .

    BRACKETL        reduce using rule 32 (tipoImpresion -> FMT DOT PRINTLN .)


state 88

    (22) estructuraControl -> SWITCH VARIABLE LOCKL cases . LOCKR

    LOCKR           shift and go to state 109


state 89

    (27) cases -> case .
    (28) cases -> case . cases
    (27) cases -> . case
    (28) cases -> . case cases
    (29) case -> . CASE condicionCase COLON main

    LOCKR           reduce using rule 27 (cases -> case .)
    CASE            shift and go to state 90

    case                           shift and go to state 89
    cases                          shift and go to state 110

state 90

    (29) case -> CASE . condicionCase COLON main
    (49) condicionCase -> . INTEGER
    (50) condicionCase -> . VARIABLE
    (51) condicionCase -> . condicion
    (52) condicion -> . valor operadorComparacion valor
    (53) condicion -> . valor operadorLogico valor
    (74) valor -> . STRING
    (75) valor -> . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    INTEGER         shift and go to state 112
    VARIABLE        shift and go to state 113
    STRING          shift and go to state 32
    FLOAT           shift and go to state 34

    condicionCase                  shift and go to state 111
    condicion                      shift and go to state 114
    valor                          shift and go to state 30
    factor                         shift and go to state 33

state 91

    (23) estructuraControl -> FOR condicion LOCKL main . LOCKR

    LOCKR           shift and go to state 115


state 92

    (24) estructuraControl -> FOR asignacion SEMICOLON condicion . SEMICOLON iterador LOCKL main LOCKR

    SEMICOLON       shift and go to state 116


state 93

    (47) varShortAssign -> VARIABLE . SHORTASSIGN

    SHORTASSIGN     shift and go to state 25


state 94

    (25) estructuraControl -> FOR VARIABLE COMA varShortAssign . RANGE VARIABLE LOCKL main LOCKR

    RANGE           shift and go to state 117


state 95

    (26) estructuraControl -> FOR varShortAssign RANGE VARIABLE . LOCKL main LOCKR

    LOCKL           shift and go to state 118


state 96

    (52) condicion -> valor operadorComparacion valor .

    LOCKL           reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    SWITCH          reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    FOR             reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    VARIABLE        reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    FMT             reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    VAR             reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    $end            reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    LOCKR           reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    CASE            reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    SEMICOLON       reduce using rule 52 (condicion -> valor operadorComparacion valor .)
    COLON           reduce using rule 52 (condicion -> valor operadorComparacion valor .)


state 97

    (53) condicion -> valor operadorLogico valor .

    LOCKL           reduce using rule 53 (condicion -> valor operadorLogico valor .)
    SWITCH          reduce using rule 53 (condicion -> valor operadorLogico valor .)
    FOR             reduce using rule 53 (condicion -> valor operadorLogico valor .)
    VARIABLE        reduce using rule 53 (condicion -> valor operadorLogico valor .)
    FMT             reduce using rule 53 (condicion -> valor operadorLogico valor .)
    VAR             reduce using rule 53 (condicion -> valor operadorLogico valor .)
    $end            reduce using rule 53 (condicion -> valor operadorLogico valor .)
    LOCKR           reduce using rule 53 (condicion -> valor operadorLogico valor .)
    CASE            reduce using rule 53 (condicion -> valor operadorLogico valor .)
    SEMICOLON       reduce using rule 53 (condicion -> valor operadorLogico valor .)
    COLON           reduce using rule 53 (condicion -> valor operadorLogico valor .)


state 98

    (45) declaracion -> varShortAssign BUFIO DOT NEWREADER . BRACKETL OS DOT STDIN BRACKETR

    BRACKETL        shift and go to state 119


state 99

    (46) declaracion -> varShortAssign BUFIO DOT NEWWRITER . BRACKETL OS DOT STDOUT BRACKETR

    BRACKETL        shift and go to state 120


state 100

    (35) lecturaReader -> varShortAssign VARIABLE DOT READSTRING . BRACKETL STRING BRACKETR

    BRACKETL        shift and go to state 121


state 101

    (66) expresionMatematica -> factor operadorMatematico factor .

    SWITCH          reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    FOR             reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    VARIABLE        reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    FMT             reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    VAR             reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    $end            reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    LOCKR           reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    CASE            reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)
    SEMICOLON       reduce using rule 66 (expresionMatematica -> factor operadorMatematico factor .)


state 102

    (17) asignacion -> varAssign tipoDato ASSIGN asignable .

    SWITCH          reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    FOR             reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    VARIABLE        reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    FMT             reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    VAR             reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    $end            reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    LOCKR           reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    CASE            reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    SEMICOLON       reduce using rule 17 (asignacion -> varAssign tipoDato ASSIGN asignable .)


state 103

    (30) impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .

    SWITCH          reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    FOR             reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    VARIABLE        reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    FMT             reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    VAR             reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    $end            reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    LOCKR           reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    CASE            reduce using rule 30 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)


state 104

    (73) valores -> valor COMA . valores
    (72) valores -> . valor
    (73) valores -> . valor COMA valores
    (74) valor -> . STRING
    (75) valor -> . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    valor                          shift and go to state 81
    valores                        shift and go to state 122
    factor                         shift and go to state 33

state 105

    (33) impresionBufio -> FMT DOT FPRINT BRACKETL . VARIABLE COMA STRING BRACKETR

    VARIABLE        shift and go to state 123


state 106

    (34) impresionFormato -> FMT DOT PRINTF BRACKETL . STRING COMA valores BRACKETR

    STRING          shift and go to state 124


state 107

    (36) lecturaScanf -> FMT DOT SCANF BRACKETL . STRING opcionLectura BRACKETR

    STRING          shift and go to state 125


state 108

    (40) lecturaSscanf -> FMT DOT SSCANF BRACKETL . opcionesLectura BRACKETR
    (41) opcionesLectura -> . opciones
    (42) opcionesLectura -> . opciones COMA opcionesLectura
    (43) opciones -> . STRING
    (44) opciones -> . ampersand
    (39) ampersand -> . AMPERSON VARIABLE

    STRING          shift and go to state 128
    AMPERSON        shift and go to state 130

    opcionesLectura                shift and go to state 126
    opciones                       shift and go to state 127
    ampersand                      shift and go to state 129

state 109

    (22) estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .

    SWITCH          reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    FOR             reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    VARIABLE        reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    FMT             reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    VAR             reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    $end            reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    LOCKR           reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    CASE            reduce using rule 22 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)


state 110

    (28) cases -> case cases .

    LOCKR           reduce using rule 28 (cases -> case cases .)


state 111

    (29) case -> CASE condicionCase . COLON main

    COLON           shift and go to state 131


state 112

    (49) condicionCase -> INTEGER .
    (78) factor -> INTEGER .

    COLON           reduce using rule 49 (condicionCase -> INTEGER .)
    EQUAL           reduce using rule 78 (factor -> INTEGER .)
    UNEQUAL         reduce using rule 78 (factor -> INTEGER .)
    GREATERTHAN     reduce using rule 78 (factor -> INTEGER .)
    SMALLERTHAN     reduce using rule 78 (factor -> INTEGER .)
    GREATEROREQUALTHAN reduce using rule 78 (factor -> INTEGER .)
    SMALLEROREQUALTHAN reduce using rule 78 (factor -> INTEGER .)
    AND             reduce using rule 78 (factor -> INTEGER .)
    OR              reduce using rule 78 (factor -> INTEGER .)
    NOT             reduce using rule 78 (factor -> INTEGER .)


state 113

    (50) condicionCase -> VARIABLE .
    (76) factor -> VARIABLE .

    COLON           reduce using rule 50 (condicionCase -> VARIABLE .)
    EQUAL           reduce using rule 76 (factor -> VARIABLE .)
    UNEQUAL         reduce using rule 76 (factor -> VARIABLE .)
    GREATERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 76 (factor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 76 (factor -> VARIABLE .)
    AND             reduce using rule 76 (factor -> VARIABLE .)
    OR              reduce using rule 76 (factor -> VARIABLE .)
    NOT             reduce using rule 76 (factor -> VARIABLE .)


state 114

    (51) condicionCase -> condicion .

    COLON           reduce using rule 51 (condicionCase -> condicion .)


state 115

    (23) estructuraControl -> FOR condicion LOCKL main LOCKR .

    SWITCH          reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    FOR             reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    VARIABLE        reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    FMT             reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    VAR             reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    $end            reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    LOCKR           reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    CASE            reduce using rule 23 (estructuraControl -> FOR condicion LOCKL main LOCKR .)


state 116

    (24) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON . iterador LOCKL main LOCKR
    (79) iterador -> . VARIABLE INCREMENT
    (80) iterador -> . VARIABLE DECREMENT

    VARIABLE        shift and go to state 133

    iterador                       shift and go to state 132

state 117

    (25) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE . VARIABLE LOCKL main LOCKR

    VARIABLE        shift and go to state 134


state 118

    (26) estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (7) ejecutable -> . lectura
    (22) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (23) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (24) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (8) impresion -> . impresionSencilla
    (9) impresion -> . impresionBufio
    (10) impresion -> . impresionFormato
    (18) declaracion -> . varAssign tipoDato
    (45) declaracion -> . varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (11) lectura -> . lecturaReader
    (12) lectura -> . lecturaScanf
    (13) lectura -> . lecturaSscanf
    (30) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (33) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (48) varAssign -> . VAR VARIABLE
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (35) lecturaReader -> . varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (36) lecturaScanf -> . FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> . FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> . FMT DOT PRINT
    (32) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 8
    FOR             shift and go to state 10
    VARIABLE        shift and go to state 9
    FMT             shift and go to state 20
    VAR             shift and go to state 21

    varShortAssign                 shift and go to state 11
    main                           shift and go to state 135
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    lectura                        shift and go to state 7
    impresionSencilla              shift and go to state 12
    impresionBufio                 shift and go to state 13
    impresionFormato               shift and go to state 14
    varAssign                      shift and go to state 15
    lecturaReader                  shift and go to state 16
    lecturaScanf                   shift and go to state 17
    lecturaSscanf                  shift and go to state 18
    tipoImpresion                  shift and go to state 19

state 119

    (45) declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL . OS DOT STDIN BRACKETR

    OS              shift and go to state 136


state 120

    (46) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL . OS DOT STDOUT BRACKETR

    OS              shift and go to state 137


state 121

    (35) lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL . STRING BRACKETR

    STRING          shift and go to state 138


state 122

    (73) valores -> valor COMA valores .

    BRACKETR        reduce using rule 73 (valores -> valor COMA valores .)


state 123

    (33) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE . COMA STRING BRACKETR

    COMA            shift and go to state 139


state 124

    (34) impresionFormato -> FMT DOT PRINTF BRACKETL STRING . COMA valores BRACKETR

    COMA            shift and go to state 140


state 125

    (36) lecturaScanf -> FMT DOT SCANF BRACKETL STRING . opcionLectura BRACKETR
    (37) opcionLectura -> . COMA opciones
    (38) opcionLectura -> . COMA opciones opcionLectura

    COMA            shift and go to state 142

    opcionLectura                  shift and go to state 141

state 126

    (40) lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura . BRACKETR

    BRACKETR        shift and go to state 143


state 127

    (41) opcionesLectura -> opciones .
    (42) opcionesLectura -> opciones . COMA opcionesLectura

    BRACKETR        reduce using rule 41 (opcionesLectura -> opciones .)
    COMA            shift and go to state 144


state 128

    (43) opciones -> STRING .

    COMA            reduce using rule 43 (opciones -> STRING .)
    BRACKETR        reduce using rule 43 (opciones -> STRING .)


state 129

    (44) opciones -> ampersand .

    COMA            reduce using rule 44 (opciones -> ampersand .)
    BRACKETR        reduce using rule 44 (opciones -> ampersand .)


state 130

    (39) ampersand -> AMPERSON . VARIABLE

    VARIABLE        shift and go to state 145


state 131

    (29) case -> CASE condicionCase COLON . main
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (7) ejecutable -> . lectura
    (22) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (23) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (24) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (8) impresion -> . impresionSencilla
    (9) impresion -> . impresionBufio
    (10) impresion -> . impresionFormato
    (18) declaracion -> . varAssign tipoDato
    (45) declaracion -> . varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (11) lectura -> . lecturaReader
    (12) lectura -> . lecturaScanf
    (13) lectura -> . lecturaSscanf
    (30) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (33) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (48) varAssign -> . VAR VARIABLE
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (35) lecturaReader -> . varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (36) lecturaScanf -> . FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> . FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> . FMT DOT PRINT
    (32) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 8
    FOR             shift and go to state 10
    VARIABLE        shift and go to state 9
    FMT             shift and go to state 20
    VAR             shift and go to state 21

    main                           shift and go to state 146
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    lectura                        shift and go to state 7
    varShortAssign                 shift and go to state 11
    impresionSencilla              shift and go to state 12
    impresionBufio                 shift and go to state 13
    impresionFormato               shift and go to state 14
    varAssign                      shift and go to state 15
    lecturaReader                  shift and go to state 16
    lecturaScanf                   shift and go to state 17
    lecturaSscanf                  shift and go to state 18
    tipoImpresion                  shift and go to state 19

state 132

    (24) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador . LOCKL main LOCKR

    LOCKL           shift and go to state 147


state 133

    (79) iterador -> VARIABLE . INCREMENT
    (80) iterador -> VARIABLE . DECREMENT

    INCREMENT       shift and go to state 148
    DECREMENT       shift and go to state 149


state 134

    (25) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE . LOCKL main LOCKR

    LOCKL           shift and go to state 150


state 135

    (26) estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main . LOCKR

    LOCKR           shift and go to state 151


state 136

    (45) declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS . DOT STDIN BRACKETR

    DOT             shift and go to state 152


state 137

    (46) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS . DOT STDOUT BRACKETR

    DOT             shift and go to state 153


state 138

    (35) lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING . BRACKETR

    BRACKETR        shift and go to state 154


state 139

    (33) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA . STRING BRACKETR

    STRING          shift and go to state 155


state 140

    (34) impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA . valores BRACKETR
    (72) valores -> . valor
    (73) valores -> . valor COMA valores
    (74) valor -> . STRING
    (75) valor -> . factor
    (76) factor -> . VARIABLE
    (77) factor -> . FLOAT
    (78) factor -> . INTEGER

    STRING          shift and go to state 32
    VARIABLE        shift and go to state 52
    FLOAT           shift and go to state 34
    INTEGER         shift and go to state 35

    valores                        shift and go to state 156
    valor                          shift and go to state 81
    factor                         shift and go to state 33

state 141

    (36) lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura . BRACKETR

    BRACKETR        shift and go to state 157


state 142

    (37) opcionLectura -> COMA . opciones
    (38) opcionLectura -> COMA . opciones opcionLectura
    (43) opciones -> . STRING
    (44) opciones -> . ampersand
    (39) ampersand -> . AMPERSON VARIABLE

    STRING          shift and go to state 128
    AMPERSON        shift and go to state 130

    opciones                       shift and go to state 158
    ampersand                      shift and go to state 129

state 143

    (40) lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .

    SWITCH          reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)
    FOR             reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)
    VARIABLE        reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)
    FMT             reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)
    VAR             reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)
    $end            reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)
    LOCKR           reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)
    CASE            reduce using rule 40 (lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR .)


state 144

    (42) opcionesLectura -> opciones COMA . opcionesLectura
    (41) opcionesLectura -> . opciones
    (42) opcionesLectura -> . opciones COMA opcionesLectura
    (43) opciones -> . STRING
    (44) opciones -> . ampersand
    (39) ampersand -> . AMPERSON VARIABLE

    STRING          shift and go to state 128
    AMPERSON        shift and go to state 130

    opciones                       shift and go to state 127
    opcionesLectura                shift and go to state 159
    ampersand                      shift and go to state 129

state 145

    (39) ampersand -> AMPERSON VARIABLE .

    COMA            reduce using rule 39 (ampersand -> AMPERSON VARIABLE .)
    BRACKETR        reduce using rule 39 (ampersand -> AMPERSON VARIABLE .)


state 146

    (29) case -> CASE condicionCase COLON main .

    CASE            reduce using rule 29 (case -> CASE condicionCase COLON main .)
    LOCKR           reduce using rule 29 (case -> CASE condicionCase COLON main .)


state 147

    (24) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (7) ejecutable -> . lectura
    (22) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (23) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (24) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (8) impresion -> . impresionSencilla
    (9) impresion -> . impresionBufio
    (10) impresion -> . impresionFormato
    (18) declaracion -> . varAssign tipoDato
    (45) declaracion -> . varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (11) lectura -> . lecturaReader
    (12) lectura -> . lecturaScanf
    (13) lectura -> . lecturaSscanf
    (30) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (33) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (48) varAssign -> . VAR VARIABLE
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (35) lecturaReader -> . varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (36) lecturaScanf -> . FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> . FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> . FMT DOT PRINT
    (32) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 8
    FOR             shift and go to state 10
    VARIABLE        shift and go to state 9
    FMT             shift and go to state 20
    VAR             shift and go to state 21

    asignacion                     shift and go to state 6
    main                           shift and go to state 160
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    lectura                        shift and go to state 7
    varShortAssign                 shift and go to state 11
    impresionSencilla              shift and go to state 12
    impresionBufio                 shift and go to state 13
    impresionFormato               shift and go to state 14
    varAssign                      shift and go to state 15
    lecturaReader                  shift and go to state 16
    lecturaScanf                   shift and go to state 17
    lecturaSscanf                  shift and go to state 18
    tipoImpresion                  shift and go to state 19

state 148

    (79) iterador -> VARIABLE INCREMENT .

    LOCKL           reduce using rule 79 (iterador -> VARIABLE INCREMENT .)


state 149

    (80) iterador -> VARIABLE DECREMENT .

    LOCKL           reduce using rule 80 (iterador -> VARIABLE DECREMENT .)


state 150

    (25) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (7) ejecutable -> . lectura
    (22) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (23) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (24) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (25) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (26) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (8) impresion -> . impresionSencilla
    (9) impresion -> . impresionBufio
    (10) impresion -> . impresionFormato
    (18) declaracion -> . varAssign tipoDato
    (45) declaracion -> . varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR
    (46) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (14) asignacion -> . varShortAssign asignable
    (15) asignacion -> . varAssign ASSIGN asignable
    (16) asignacion -> . VARIABLE ASSIGN asignable
    (17) asignacion -> . varAssign tipoDato ASSIGN asignable
    (11) lectura -> . lecturaReader
    (12) lectura -> . lecturaScanf
    (13) lectura -> . lecturaSscanf
    (30) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (33) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (34) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (48) varAssign -> . VAR VARIABLE
    (47) varShortAssign -> . VARIABLE SHORTASSIGN
    (35) lecturaReader -> . varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR
    (36) lecturaScanf -> . FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR
    (40) lecturaSscanf -> . FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR
    (31) tipoImpresion -> . FMT DOT PRINT
    (32) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 8
    FOR             shift and go to state 10
    VARIABLE        shift and go to state 9
    FMT             shift and go to state 20
    VAR             shift and go to state 21

    varShortAssign                 shift and go to state 11
    main                           shift and go to state 161
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    lectura                        shift and go to state 7
    impresionSencilla              shift and go to state 12
    impresionBufio                 shift and go to state 13
    impresionFormato               shift and go to state 14
    varAssign                      shift and go to state 15
    lecturaReader                  shift and go to state 16
    lecturaScanf                   shift and go to state 17
    lecturaSscanf                  shift and go to state 18
    tipoImpresion                  shift and go to state 19

state 151

    (26) estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .

    SWITCH          reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FOR             reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VARIABLE        reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FMT             reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VAR             reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    $end            reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    LOCKR           reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    CASE            reduce using rule 26 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)


state 152

    (45) declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT . STDIN BRACKETR

    STDIN           shift and go to state 162


state 153

    (46) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT . STDOUT BRACKETR

    STDOUT          shift and go to state 163


state 154

    (35) lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .

    SWITCH          reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)
    FOR             reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)
    VARIABLE        reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)
    FMT             reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)
    VAR             reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)
    $end            reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)
    LOCKR           reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)
    CASE            reduce using rule 35 (lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR .)


state 155

    (33) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING . BRACKETR

    BRACKETR        shift and go to state 164


state 156

    (34) impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores . BRACKETR

    BRACKETR        shift and go to state 165


state 157

    (36) lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .

    SWITCH          reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)
    FOR             reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)
    VARIABLE        reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)
    FMT             reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)
    VAR             reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)
    $end            reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)
    LOCKR           reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)
    CASE            reduce using rule 36 (lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR .)


state 158

    (37) opcionLectura -> COMA opciones .
    (38) opcionLectura -> COMA opciones . opcionLectura
    (37) opcionLectura -> . COMA opciones
    (38) opcionLectura -> . COMA opciones opcionLectura

    BRACKETR        reduce using rule 37 (opcionLectura -> COMA opciones .)
    COMA            shift and go to state 142

    opcionLectura                  shift and go to state 166

state 159

    (42) opcionesLectura -> opciones COMA opcionesLectura .

    BRACKETR        reduce using rule 42 (opcionesLectura -> opciones COMA opcionesLectura .)


state 160

    (24) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main . LOCKR

    LOCKR           shift and go to state 167


state 161

    (25) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main . LOCKR

    LOCKR           shift and go to state 168


state 162

    (45) declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN . BRACKETR

    BRACKETR        shift and go to state 169


state 163

    (46) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT . BRACKETR

    BRACKETR        shift and go to state 170


state 164

    (33) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .

    SWITCH          reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    FOR             reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    VARIABLE        reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    FMT             reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    VAR             reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    $end            reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    LOCKR           reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    CASE            reduce using rule 33 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)


state 165

    (34) impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .

    SWITCH          reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    FOR             reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    VARIABLE        reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    FMT             reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    VAR             reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    $end            reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    LOCKR           reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    CASE            reduce using rule 34 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)


state 166

    (38) opcionLectura -> COMA opciones opcionLectura .

    BRACKETR        reduce using rule 38 (opcionLectura -> COMA opciones opcionLectura .)


state 167

    (24) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .

    SWITCH          reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    FOR             reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    VARIABLE        reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    FMT             reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    VAR             reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    $end            reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    LOCKR           reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    CASE            reduce using rule 24 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)


state 168

    (25) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .

    SWITCH          reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FOR             reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VARIABLE        reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FMT             reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VAR             reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    $end            reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    LOCKR           reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    CASE            reduce using rule 25 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)


state 169

    (45) declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .

    SWITCH          reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)
    FOR             reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)
    VARIABLE        reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)
    FMT             reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)
    VAR             reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)
    $end            reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)
    LOCKR           reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)
    CASE            reduce using rule 45 (declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR .)


state 170

    (46) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .

    SWITCH          reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    FOR             reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    VARIABLE        reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    FMT             reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    VAR             reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    $end            reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    LOCKR           reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    CASE            reduce using rule 46 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)

