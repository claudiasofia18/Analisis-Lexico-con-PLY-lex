Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSON
    APPEND
    BRACEL
    BRACER
    BREAK
    CAP
    CHAN
    CONST
    DEFAULT
    DEFER
    ELSE
    ERROR
    FALLTHROUGH
    FALSE
    FRONT
    FUNCION
    GO
    GOTO
    IF
    IMPORT
    INTERFACE
    LEN
    LIST
    MAP
    NEW
    PACKAGE
    PUSHBACK
    RETURN
    SCANF
    SELECT
    SSCANF
    STRINGTYPE
    STRUCT
    TRUE
    TYPE

Grammar

Rule 0     S' -> main
Rule 1     main -> ejecutable
Rule 2     main -> ejecutable main
Rule 3     ejecutable -> estructuraControl
Rule 4     ejecutable -> impresion
Rule 5     ejecutable -> declaracion
Rule 6     ejecutable -> asignacion
Rule 7     impresion -> impresionSencilla
Rule 8     impresion -> impresionBufio
Rule 9     impresion -> impresionFormato
Rule 10    asignacion -> varShortAssign asignable
Rule 11    asignacion -> varAssign ASSIGN asignable
Rule 12    asignacion -> VARIABLE ASSIGN asignable
Rule 13    asignacion -> varAssign tipoDato ASSIGN asignable
Rule 14    declaracion -> varAssign tipoDato
Rule 15    asignable -> valor
Rule 16    asignable -> expresionMatematica
Rule 17    asignable -> condicion
Rule 18    estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR
Rule 19    estructuraControl -> FOR condicion LOCKL main LOCKR
Rule 20    estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
Rule 21    estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
Rule 22    estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
Rule 23    cases -> case
Rule 24    cases -> case cases
Rule 25    case -> CASE condicionCase COLON main
Rule 26    impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR
Rule 27    tipoImpresion -> FMT DOT PRINT
Rule 28    tipoImpresion -> FMT DOT PRINTLN
Rule 29    impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
Rule 30    impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
Rule 31    declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
Rule 32    varShortAssign -> VARIABLE SHORTASSIGN
Rule 33    varAssign -> VAR VARIABLE
Rule 34    condicionCase -> INTEGER
Rule 35    condicionCase -> VARIABLE
Rule 36    condicionCase -> condicion
Rule 37    condicion -> valor operadorComparacion valor
Rule 38    condicion -> valor operadorLogico valor
Rule 39    operadorComparacion -> EQUAL
Rule 40    operadorComparacion -> UNEQUAL
Rule 41    operadorComparacion -> GREATERTHAN
Rule 42    operadorComparacion -> SMALLERTHAN
Rule 43    operadorComparacion -> GREATEROREQUALTHAN
Rule 44    operadorComparacion -> SMALLEROREQUALTHAN
Rule 45    tipoDato -> INTTYPE
Rule 46    tipoDato -> FLOATTYPE
Rule 47    tipoDato -> BOOLEANTYPE
Rule 48    operadorLogico -> AND
Rule 49    operadorLogico -> OR
Rule 50    operadorLogico -> NOT
Rule 51    expresionMatematica -> factor operadorMatematico factor
Rule 52    operadorMatematico -> PLUS
Rule 53    operadorMatematico -> MINUS
Rule 54    operadorMatematico -> TIMES
Rule 55    operadorMatematico -> DIVIDE
Rule 56    operadorMatematico -> MODULE
Rule 57    valores -> valor
Rule 58    valores -> valor COMA valores
Rule 59    valor -> STRING
Rule 60    valor -> factor
Rule 61    factor -> VARIABLE
Rule 62    factor -> FLOAT
Rule 63    factor -> INTEGER
Rule 64    iterador -> VARIABLE INCREMENT
Rule 65    iterador -> VARIABLE DECREMENT

Terminals, with rules where they appear

AMPERSON             : 
AND                  : 48
APPEND               : 
ASSIGN               : 11 12 13
BOOLEANTYPE          : 47
BRACEL               : 
BRACER               : 
BRACKETL             : 26 29 30 31
BRACKETR             : 26 29 30 31
BREAK                : 
BUFIO                : 31
CAP                  : 
CASE                 : 25
CHAN                 : 
COLON                : 25
COMA                 : 21 29 30 58
CONST                : 
DECREMENT            : 65
DEFAULT              : 
DEFER                : 
DIVIDE               : 55
DOT                  : 27 28 29 30 31 31
ELSE                 : 
EQUAL                : 39
ERROR                : 
FALLTHROUGH          : 
FALSE                : 
FLOAT                : 62
FLOATTYPE            : 46
FMT                  : 27 28 29 30
FOR                  : 19 20 21 22
FPRINT               : 29
FRONT                : 
FUNCION              : 
GO                   : 
GOTO                 : 
GREATEROREQUALTHAN   : 43
GREATERTHAN          : 41
IF                   : 
IMPORT               : 
INCREMENT            : 64
INTEGER              : 34 63
INTERFACE            : 
INTTYPE              : 45
LEN                  : 
LIST                 : 
LOCKL                : 18 19 20 21 22
LOCKR                : 18 19 20 21 22
MAP                  : 
MINUS                : 53
MODULE               : 56
NEW                  : 
NEWWRITER            : 31
NOT                  : 50
OR                   : 49
OS                   : 31
PACKAGE              : 
PLUS                 : 52
PRINT                : 27
PRINTF               : 30
PRINTLN              : 28
PUSHBACK             : 
RANGE                : 21 22
RETURN               : 
SCANF                : 
SELECT               : 
SEMICOLON            : 20 20
SHORTASSIGN          : 32
SMALLEROREQUALTHAN   : 44
SMALLERTHAN          : 42
SSCANF               : 
STDOUT               : 31
STRING               : 29 30 59
STRINGTYPE           : 
STRUCT               : 
SWITCH               : 18
TIMES                : 54
TRUE                 : 
TYPE                 : 
UNEQUAL              : 40
VAR                  : 33
VARIABLE             : 12 18 21 21 22 29 32 33 35 61 64 65
error                : 

Nonterminals, with rules where they appear

asignable            : 10 11 12 13
asignacion           : 6 20
case                 : 23 24
cases                : 18 24
condicion            : 17 19 20 36
condicionCase        : 25
declaracion          : 5
ejecutable           : 1 2
estructuraControl    : 3
expresionMatematica  : 16
factor               : 51 51 60
impresion            : 4
impresionBufio       : 8
impresionFormato     : 9
impresionSencilla    : 7
iterador             : 20
main                 : 2 19 20 21 22 25 0
operadorComparacion  : 37
operadorLogico       : 38
operadorMatematico   : 51
tipoDato             : 13 14
tipoImpresion        : 26
valor                : 15 37 37 38 38 57 58
valores              : 26 30 58
varAssign            : 11 13 14
varShortAssign       : 10 21 22 31

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (18) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (19) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (20) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (7) impresion -> . impresionSencilla
    (8) impresion -> . impresionBufio
    (9) impresion -> . impresionFormato
    (14) declaracion -> . varAssign tipoDato
    (31) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (26) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (29) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (33) varAssign -> . VAR VARIABLE
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (27) tipoImpresion -> . FMT DOT PRINT
    (28) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 7
    FOR             shift and go to state 9
    VARIABLE        shift and go to state 8
    FMT             shift and go to state 16
    VAR             shift and go to state 17

    main                           shift and go to state 1
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    varShortAssign                 shift and go to state 10
    impresionSencilla              shift and go to state 11
    impresionBufio                 shift and go to state 12
    impresionFormato               shift and go to state 13
    varAssign                      shift and go to state 14
    tipoImpresion                  shift and go to state 15

state 1

    (0) S' -> main .



state 2

    (1) main -> ejecutable .
    (2) main -> ejecutable . main
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (18) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (19) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (20) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (7) impresion -> . impresionSencilla
    (8) impresion -> . impresionBufio
    (9) impresion -> . impresionFormato
    (14) declaracion -> . varAssign tipoDato
    (31) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (26) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (29) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (33) varAssign -> . VAR VARIABLE
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (27) tipoImpresion -> . FMT DOT PRINT
    (28) tipoImpresion -> . FMT DOT PRINTLN

    $end            reduce using rule 1 (main -> ejecutable .)
    LOCKR           reduce using rule 1 (main -> ejecutable .)
    CASE            reduce using rule 1 (main -> ejecutable .)
    SWITCH          shift and go to state 7
    FOR             shift and go to state 9
    VARIABLE        shift and go to state 8
    FMT             shift and go to state 16
    VAR             shift and go to state 17

    ejecutable                     shift and go to state 2
    main                           shift and go to state 18
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    varShortAssign                 shift and go to state 10
    impresionSencilla              shift and go to state 11
    impresionBufio                 shift and go to state 12
    impresionFormato               shift and go to state 13
    varAssign                      shift and go to state 14
    tipoImpresion                  shift and go to state 15

state 3

    (3) ejecutable -> estructuraControl .

    SWITCH          reduce using rule 3 (ejecutable -> estructuraControl .)
    FOR             reduce using rule 3 (ejecutable -> estructuraControl .)
    VARIABLE        reduce using rule 3 (ejecutable -> estructuraControl .)
    FMT             reduce using rule 3 (ejecutable -> estructuraControl .)
    VAR             reduce using rule 3 (ejecutable -> estructuraControl .)
    $end            reduce using rule 3 (ejecutable -> estructuraControl .)
    LOCKR           reduce using rule 3 (ejecutable -> estructuraControl .)
    CASE            reduce using rule 3 (ejecutable -> estructuraControl .)


state 4

    (4) ejecutable -> impresion .

    SWITCH          reduce using rule 4 (ejecutable -> impresion .)
    FOR             reduce using rule 4 (ejecutable -> impresion .)
    VARIABLE        reduce using rule 4 (ejecutable -> impresion .)
    FMT             reduce using rule 4 (ejecutable -> impresion .)
    VAR             reduce using rule 4 (ejecutable -> impresion .)
    $end            reduce using rule 4 (ejecutable -> impresion .)
    LOCKR           reduce using rule 4 (ejecutable -> impresion .)
    CASE            reduce using rule 4 (ejecutable -> impresion .)


state 5

    (5) ejecutable -> declaracion .

    SWITCH          reduce using rule 5 (ejecutable -> declaracion .)
    FOR             reduce using rule 5 (ejecutable -> declaracion .)
    VARIABLE        reduce using rule 5 (ejecutable -> declaracion .)
    FMT             reduce using rule 5 (ejecutable -> declaracion .)
    VAR             reduce using rule 5 (ejecutable -> declaracion .)
    $end            reduce using rule 5 (ejecutable -> declaracion .)
    LOCKR           reduce using rule 5 (ejecutable -> declaracion .)
    CASE            reduce using rule 5 (ejecutable -> declaracion .)


state 6

    (6) ejecutable -> asignacion .

    SWITCH          reduce using rule 6 (ejecutable -> asignacion .)
    FOR             reduce using rule 6 (ejecutable -> asignacion .)
    VARIABLE        reduce using rule 6 (ejecutable -> asignacion .)
    FMT             reduce using rule 6 (ejecutable -> asignacion .)
    VAR             reduce using rule 6 (ejecutable -> asignacion .)
    $end            reduce using rule 6 (ejecutable -> asignacion .)
    LOCKR           reduce using rule 6 (ejecutable -> asignacion .)
    CASE            reduce using rule 6 (ejecutable -> asignacion .)


state 7

    (18) estructuraControl -> SWITCH . VARIABLE LOCKL cases LOCKR

    VARIABLE        shift and go to state 19


state 8

    (12) asignacion -> VARIABLE . ASSIGN asignable
    (32) varShortAssign -> VARIABLE . SHORTASSIGN

    ASSIGN          shift and go to state 20
    SHORTASSIGN     shift and go to state 21


state 9

    (19) estructuraControl -> FOR . condicion LOCKL main LOCKR
    (20) estructuraControl -> FOR . asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> FOR . VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> FOR . varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (59) valor -> . STRING
    (60) valor -> . factor
    (33) varAssign -> . VAR VARIABLE
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    VARIABLE        shift and go to state 24
    STRING          shift and go to state 28
    VAR             shift and go to state 17
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    condicion                      shift and go to state 22
    asignacion                     shift and go to state 23
    varShortAssign                 shift and go to state 25
    valor                          shift and go to state 26
    varAssign                      shift and go to state 27
    factor                         shift and go to state 29

state 10

    (31) declaracion -> varShortAssign . BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> varShortAssign . asignable
    (15) asignable -> . valor
    (16) asignable -> . expresionMatematica
    (17) asignable -> . condicion
    (59) valor -> . STRING
    (60) valor -> . factor
    (51) expresionMatematica -> . factor operadorMatematico factor
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    BUFIO           shift and go to state 32
    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    asignable                      shift and go to state 33
    valor                          shift and go to state 34
    expresionMatematica            shift and go to state 35
    condicion                      shift and go to state 36
    factor                         shift and go to state 37

state 11

    (7) impresion -> impresionSencilla .

    SWITCH          reduce using rule 7 (impresion -> impresionSencilla .)
    FOR             reduce using rule 7 (impresion -> impresionSencilla .)
    VARIABLE        reduce using rule 7 (impresion -> impresionSencilla .)
    FMT             reduce using rule 7 (impresion -> impresionSencilla .)
    VAR             reduce using rule 7 (impresion -> impresionSencilla .)
    $end            reduce using rule 7 (impresion -> impresionSencilla .)
    LOCKR           reduce using rule 7 (impresion -> impresionSencilla .)
    CASE            reduce using rule 7 (impresion -> impresionSencilla .)


state 12

    (8) impresion -> impresionBufio .

    SWITCH          reduce using rule 8 (impresion -> impresionBufio .)
    FOR             reduce using rule 8 (impresion -> impresionBufio .)
    VARIABLE        reduce using rule 8 (impresion -> impresionBufio .)
    FMT             reduce using rule 8 (impresion -> impresionBufio .)
    VAR             reduce using rule 8 (impresion -> impresionBufio .)
    $end            reduce using rule 8 (impresion -> impresionBufio .)
    LOCKR           reduce using rule 8 (impresion -> impresionBufio .)
    CASE            reduce using rule 8 (impresion -> impresionBufio .)


state 13

    (9) impresion -> impresionFormato .

    SWITCH          reduce using rule 9 (impresion -> impresionFormato .)
    FOR             reduce using rule 9 (impresion -> impresionFormato .)
    VARIABLE        reduce using rule 9 (impresion -> impresionFormato .)
    FMT             reduce using rule 9 (impresion -> impresionFormato .)
    VAR             reduce using rule 9 (impresion -> impresionFormato .)
    $end            reduce using rule 9 (impresion -> impresionFormato .)
    LOCKR           reduce using rule 9 (impresion -> impresionFormato .)
    CASE            reduce using rule 9 (impresion -> impresionFormato .)


state 14

    (14) declaracion -> varAssign . tipoDato
    (11) asignacion -> varAssign . ASSIGN asignable
    (13) asignacion -> varAssign . tipoDato ASSIGN asignable
    (45) tipoDato -> . INTTYPE
    (46) tipoDato -> . FLOATTYPE
    (47) tipoDato -> . BOOLEANTYPE

    ASSIGN          shift and go to state 40
    INTTYPE         shift and go to state 41
    FLOATTYPE       shift and go to state 42
    BOOLEANTYPE     shift and go to state 43

    tipoDato                       shift and go to state 39

state 15

    (26) impresionSencilla -> tipoImpresion . BRACKETL valores BRACKETR

    BRACKETL        shift and go to state 44


state 16

    (29) impresionBufio -> FMT . DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> FMT . DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (27) tipoImpresion -> FMT . DOT PRINT
    (28) tipoImpresion -> FMT . DOT PRINTLN

    DOT             shift and go to state 45


state 17

    (33) varAssign -> VAR . VARIABLE

    VARIABLE        shift and go to state 46


state 18

    (2) main -> ejecutable main .

    $end            reduce using rule 2 (main -> ejecutable main .)
    LOCKR           reduce using rule 2 (main -> ejecutable main .)
    CASE            reduce using rule 2 (main -> ejecutable main .)


state 19

    (18) estructuraControl -> SWITCH VARIABLE . LOCKL cases LOCKR

    LOCKL           shift and go to state 47


state 20

    (12) asignacion -> VARIABLE ASSIGN . asignable
    (15) asignable -> . valor
    (16) asignable -> . expresionMatematica
    (17) asignable -> . condicion
    (59) valor -> . STRING
    (60) valor -> . factor
    (51) expresionMatematica -> . factor operadorMatematico factor
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    asignable                      shift and go to state 48
    valor                          shift and go to state 34
    expresionMatematica            shift and go to state 35
    condicion                      shift and go to state 36
    factor                         shift and go to state 37

state 21

    (32) varShortAssign -> VARIABLE SHORTASSIGN .

    BUFIO           reduce using rule 32 (varShortAssign -> VARIABLE SHORTASSIGN .)
    STRING          reduce using rule 32 (varShortAssign -> VARIABLE SHORTASSIGN .)
    VARIABLE        reduce using rule 32 (varShortAssign -> VARIABLE SHORTASSIGN .)
    FLOAT           reduce using rule 32 (varShortAssign -> VARIABLE SHORTASSIGN .)
    INTEGER         reduce using rule 32 (varShortAssign -> VARIABLE SHORTASSIGN .)
    RANGE           reduce using rule 32 (varShortAssign -> VARIABLE SHORTASSIGN .)


state 22

    (19) estructuraControl -> FOR condicion . LOCKL main LOCKR

    LOCKL           shift and go to state 49


state 23

    (20) estructuraControl -> FOR asignacion . SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR

    SEMICOLON       shift and go to state 50


state 24

    (21) estructuraControl -> FOR VARIABLE . COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (12) asignacion -> VARIABLE . ASSIGN asignable
    (32) varShortAssign -> VARIABLE . SHORTASSIGN
    (61) factor -> VARIABLE .

    COMA            shift and go to state 51
    ASSIGN          shift and go to state 20
    SHORTASSIGN     shift and go to state 21
    EQUAL           reduce using rule 61 (factor -> VARIABLE .)
    UNEQUAL         reduce using rule 61 (factor -> VARIABLE .)
    GREATERTHAN     reduce using rule 61 (factor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 61 (factor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 61 (factor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 61 (factor -> VARIABLE .)
    AND             reduce using rule 61 (factor -> VARIABLE .)
    OR              reduce using rule 61 (factor -> VARIABLE .)
    NOT             reduce using rule 61 (factor -> VARIABLE .)


state 25

    (22) estructuraControl -> FOR varShortAssign . RANGE VARIABLE LOCKL main LOCKR
    (10) asignacion -> varShortAssign . asignable
    (15) asignable -> . valor
    (16) asignable -> . expresionMatematica
    (17) asignable -> . condicion
    (59) valor -> . STRING
    (60) valor -> . factor
    (51) expresionMatematica -> . factor operadorMatematico factor
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    RANGE           shift and go to state 52
    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    asignable                      shift and go to state 33
    valor                          shift and go to state 34
    expresionMatematica            shift and go to state 35
    condicion                      shift and go to state 36
    factor                         shift and go to state 37

state 26

    (37) condicion -> valor . operadorComparacion valor
    (38) condicion -> valor . operadorLogico valor
    (39) operadorComparacion -> . EQUAL
    (40) operadorComparacion -> . UNEQUAL
    (41) operadorComparacion -> . GREATERTHAN
    (42) operadorComparacion -> . SMALLERTHAN
    (43) operadorComparacion -> . GREATEROREQUALTHAN
    (44) operadorComparacion -> . SMALLEROREQUALTHAN
    (48) operadorLogico -> . AND
    (49) operadorLogico -> . OR
    (50) operadorLogico -> . NOT

    EQUAL           shift and go to state 55
    UNEQUAL         shift and go to state 56
    GREATERTHAN     shift and go to state 57
    SMALLERTHAN     shift and go to state 58
    GREATEROREQUALTHAN shift and go to state 59
    SMALLEROREQUALTHAN shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    NOT             shift and go to state 63

    operadorComparacion            shift and go to state 53
    operadorLogico                 shift and go to state 54

state 27

    (11) asignacion -> varAssign . ASSIGN asignable
    (13) asignacion -> varAssign . tipoDato ASSIGN asignable
    (45) tipoDato -> . INTTYPE
    (46) tipoDato -> . FLOATTYPE
    (47) tipoDato -> . BOOLEANTYPE

    ASSIGN          shift and go to state 40
    INTTYPE         shift and go to state 41
    FLOATTYPE       shift and go to state 42
    BOOLEANTYPE     shift and go to state 43

    tipoDato                       shift and go to state 64

state 28

    (59) valor -> STRING .

    EQUAL           reduce using rule 59 (valor -> STRING .)
    UNEQUAL         reduce using rule 59 (valor -> STRING .)
    GREATERTHAN     reduce using rule 59 (valor -> STRING .)
    SMALLERTHAN     reduce using rule 59 (valor -> STRING .)
    GREATEROREQUALTHAN reduce using rule 59 (valor -> STRING .)
    SMALLEROREQUALTHAN reduce using rule 59 (valor -> STRING .)
    AND             reduce using rule 59 (valor -> STRING .)
    OR              reduce using rule 59 (valor -> STRING .)
    NOT             reduce using rule 59 (valor -> STRING .)
    SWITCH          reduce using rule 59 (valor -> STRING .)
    FOR             reduce using rule 59 (valor -> STRING .)
    VARIABLE        reduce using rule 59 (valor -> STRING .)
    FMT             reduce using rule 59 (valor -> STRING .)
    VAR             reduce using rule 59 (valor -> STRING .)
    $end            reduce using rule 59 (valor -> STRING .)
    LOCKR           reduce using rule 59 (valor -> STRING .)
    CASE            reduce using rule 59 (valor -> STRING .)
    SEMICOLON       reduce using rule 59 (valor -> STRING .)
    COMA            reduce using rule 59 (valor -> STRING .)
    BRACKETR        reduce using rule 59 (valor -> STRING .)
    LOCKL           reduce using rule 59 (valor -> STRING .)
    COLON           reduce using rule 59 (valor -> STRING .)


state 29

    (60) valor -> factor .

    EQUAL           reduce using rule 60 (valor -> factor .)
    UNEQUAL         reduce using rule 60 (valor -> factor .)
    GREATERTHAN     reduce using rule 60 (valor -> factor .)
    SMALLERTHAN     reduce using rule 60 (valor -> factor .)
    GREATEROREQUALTHAN reduce using rule 60 (valor -> factor .)
    SMALLEROREQUALTHAN reduce using rule 60 (valor -> factor .)
    AND             reduce using rule 60 (valor -> factor .)
    OR              reduce using rule 60 (valor -> factor .)
    NOT             reduce using rule 60 (valor -> factor .)
    COMA            reduce using rule 60 (valor -> factor .)
    BRACKETR        reduce using rule 60 (valor -> factor .)
    LOCKL           reduce using rule 60 (valor -> factor .)
    SWITCH          reduce using rule 60 (valor -> factor .)
    FOR             reduce using rule 60 (valor -> factor .)
    VARIABLE        reduce using rule 60 (valor -> factor .)
    FMT             reduce using rule 60 (valor -> factor .)
    VAR             reduce using rule 60 (valor -> factor .)
    $end            reduce using rule 60 (valor -> factor .)
    LOCKR           reduce using rule 60 (valor -> factor .)
    CASE            reduce using rule 60 (valor -> factor .)
    SEMICOLON       reduce using rule 60 (valor -> factor .)
    COLON           reduce using rule 60 (valor -> factor .)


state 30

    (62) factor -> FLOAT .

    EQUAL           reduce using rule 62 (factor -> FLOAT .)
    UNEQUAL         reduce using rule 62 (factor -> FLOAT .)
    GREATERTHAN     reduce using rule 62 (factor -> FLOAT .)
    SMALLERTHAN     reduce using rule 62 (factor -> FLOAT .)
    GREATEROREQUALTHAN reduce using rule 62 (factor -> FLOAT .)
    SMALLEROREQUALTHAN reduce using rule 62 (factor -> FLOAT .)
    AND             reduce using rule 62 (factor -> FLOAT .)
    OR              reduce using rule 62 (factor -> FLOAT .)
    NOT             reduce using rule 62 (factor -> FLOAT .)
    PLUS            reduce using rule 62 (factor -> FLOAT .)
    MINUS           reduce using rule 62 (factor -> FLOAT .)
    TIMES           reduce using rule 62 (factor -> FLOAT .)
    DIVIDE          reduce using rule 62 (factor -> FLOAT .)
    MODULE          reduce using rule 62 (factor -> FLOAT .)
    SWITCH          reduce using rule 62 (factor -> FLOAT .)
    FOR             reduce using rule 62 (factor -> FLOAT .)
    VARIABLE        reduce using rule 62 (factor -> FLOAT .)
    FMT             reduce using rule 62 (factor -> FLOAT .)
    VAR             reduce using rule 62 (factor -> FLOAT .)
    $end            reduce using rule 62 (factor -> FLOAT .)
    LOCKR           reduce using rule 62 (factor -> FLOAT .)
    CASE            reduce using rule 62 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 62 (factor -> FLOAT .)
    COMA            reduce using rule 62 (factor -> FLOAT .)
    BRACKETR        reduce using rule 62 (factor -> FLOAT .)
    LOCKL           reduce using rule 62 (factor -> FLOAT .)
    COLON           reduce using rule 62 (factor -> FLOAT .)


state 31

    (63) factor -> INTEGER .

    EQUAL           reduce using rule 63 (factor -> INTEGER .)
    UNEQUAL         reduce using rule 63 (factor -> INTEGER .)
    GREATERTHAN     reduce using rule 63 (factor -> INTEGER .)
    SMALLERTHAN     reduce using rule 63 (factor -> INTEGER .)
    GREATEROREQUALTHAN reduce using rule 63 (factor -> INTEGER .)
    SMALLEROREQUALTHAN reduce using rule 63 (factor -> INTEGER .)
    AND             reduce using rule 63 (factor -> INTEGER .)
    OR              reduce using rule 63 (factor -> INTEGER .)
    NOT             reduce using rule 63 (factor -> INTEGER .)
    PLUS            reduce using rule 63 (factor -> INTEGER .)
    MINUS           reduce using rule 63 (factor -> INTEGER .)
    TIMES           reduce using rule 63 (factor -> INTEGER .)
    DIVIDE          reduce using rule 63 (factor -> INTEGER .)
    MODULE          reduce using rule 63 (factor -> INTEGER .)
    SWITCH          reduce using rule 63 (factor -> INTEGER .)
    FOR             reduce using rule 63 (factor -> INTEGER .)
    VARIABLE        reduce using rule 63 (factor -> INTEGER .)
    FMT             reduce using rule 63 (factor -> INTEGER .)
    VAR             reduce using rule 63 (factor -> INTEGER .)
    $end            reduce using rule 63 (factor -> INTEGER .)
    LOCKR           reduce using rule 63 (factor -> INTEGER .)
    CASE            reduce using rule 63 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 63 (factor -> INTEGER .)
    COMA            reduce using rule 63 (factor -> INTEGER .)
    BRACKETR        reduce using rule 63 (factor -> INTEGER .)
    LOCKL           reduce using rule 63 (factor -> INTEGER .)
    COLON           reduce using rule 63 (factor -> INTEGER .)


state 32

    (31) declaracion -> varShortAssign BUFIO . DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR

    DOT             shift and go to state 65


state 33

    (10) asignacion -> varShortAssign asignable .

    SWITCH          reduce using rule 10 (asignacion -> varShortAssign asignable .)
    FOR             reduce using rule 10 (asignacion -> varShortAssign asignable .)
    VARIABLE        reduce using rule 10 (asignacion -> varShortAssign asignable .)
    FMT             reduce using rule 10 (asignacion -> varShortAssign asignable .)
    VAR             reduce using rule 10 (asignacion -> varShortAssign asignable .)
    $end            reduce using rule 10 (asignacion -> varShortAssign asignable .)
    LOCKR           reduce using rule 10 (asignacion -> varShortAssign asignable .)
    CASE            reduce using rule 10 (asignacion -> varShortAssign asignable .)
    SEMICOLON       reduce using rule 10 (asignacion -> varShortAssign asignable .)


state 34

    (15) asignable -> valor .
    (37) condicion -> valor . operadorComparacion valor
    (38) condicion -> valor . operadorLogico valor
    (39) operadorComparacion -> . EQUAL
    (40) operadorComparacion -> . UNEQUAL
    (41) operadorComparacion -> . GREATERTHAN
    (42) operadorComparacion -> . SMALLERTHAN
    (43) operadorComparacion -> . GREATEROREQUALTHAN
    (44) operadorComparacion -> . SMALLEROREQUALTHAN
    (48) operadorLogico -> . AND
    (49) operadorLogico -> . OR
    (50) operadorLogico -> . NOT

    SWITCH          reduce using rule 15 (asignable -> valor .)
    FOR             reduce using rule 15 (asignable -> valor .)
    VARIABLE        reduce using rule 15 (asignable -> valor .)
    FMT             reduce using rule 15 (asignable -> valor .)
    VAR             reduce using rule 15 (asignable -> valor .)
    $end            reduce using rule 15 (asignable -> valor .)
    LOCKR           reduce using rule 15 (asignable -> valor .)
    CASE            reduce using rule 15 (asignable -> valor .)
    SEMICOLON       reduce using rule 15 (asignable -> valor .)
    EQUAL           shift and go to state 55
    UNEQUAL         shift and go to state 56
    GREATERTHAN     shift and go to state 57
    SMALLERTHAN     shift and go to state 58
    GREATEROREQUALTHAN shift and go to state 59
    SMALLEROREQUALTHAN shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62
    NOT             shift and go to state 63

    operadorComparacion            shift and go to state 53
    operadorLogico                 shift and go to state 54

state 35

    (16) asignable -> expresionMatematica .

    SWITCH          reduce using rule 16 (asignable -> expresionMatematica .)
    FOR             reduce using rule 16 (asignable -> expresionMatematica .)
    VARIABLE        reduce using rule 16 (asignable -> expresionMatematica .)
    FMT             reduce using rule 16 (asignable -> expresionMatematica .)
    VAR             reduce using rule 16 (asignable -> expresionMatematica .)
    $end            reduce using rule 16 (asignable -> expresionMatematica .)
    LOCKR           reduce using rule 16 (asignable -> expresionMatematica .)
    CASE            reduce using rule 16 (asignable -> expresionMatematica .)
    SEMICOLON       reduce using rule 16 (asignable -> expresionMatematica .)


state 36

    (17) asignable -> condicion .

    SWITCH          reduce using rule 17 (asignable -> condicion .)
    FOR             reduce using rule 17 (asignable -> condicion .)
    VARIABLE        reduce using rule 17 (asignable -> condicion .)
    FMT             reduce using rule 17 (asignable -> condicion .)
    VAR             reduce using rule 17 (asignable -> condicion .)
    $end            reduce using rule 17 (asignable -> condicion .)
    LOCKR           reduce using rule 17 (asignable -> condicion .)
    CASE            reduce using rule 17 (asignable -> condicion .)
    SEMICOLON       reduce using rule 17 (asignable -> condicion .)


state 37

    (60) valor -> factor .
    (51) expresionMatematica -> factor . operadorMatematico factor
    (52) operadorMatematico -> . PLUS
    (53) operadorMatematico -> . MINUS
    (54) operadorMatematico -> . TIMES
    (55) operadorMatematico -> . DIVIDE
    (56) operadorMatematico -> . MODULE

    EQUAL           reduce using rule 60 (valor -> factor .)
    UNEQUAL         reduce using rule 60 (valor -> factor .)
    GREATERTHAN     reduce using rule 60 (valor -> factor .)
    SMALLERTHAN     reduce using rule 60 (valor -> factor .)
    GREATEROREQUALTHAN reduce using rule 60 (valor -> factor .)
    SMALLEROREQUALTHAN reduce using rule 60 (valor -> factor .)
    AND             reduce using rule 60 (valor -> factor .)
    OR              reduce using rule 60 (valor -> factor .)
    NOT             reduce using rule 60 (valor -> factor .)
    SWITCH          reduce using rule 60 (valor -> factor .)
    FOR             reduce using rule 60 (valor -> factor .)
    VARIABLE        reduce using rule 60 (valor -> factor .)
    FMT             reduce using rule 60 (valor -> factor .)
    VAR             reduce using rule 60 (valor -> factor .)
    $end            reduce using rule 60 (valor -> factor .)
    LOCKR           reduce using rule 60 (valor -> factor .)
    CASE            reduce using rule 60 (valor -> factor .)
    SEMICOLON       reduce using rule 60 (valor -> factor .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULE          shift and go to state 71

    operadorMatematico             shift and go to state 66

state 38

    (61) factor -> VARIABLE .

    PLUS            reduce using rule 61 (factor -> VARIABLE .)
    MINUS           reduce using rule 61 (factor -> VARIABLE .)
    TIMES           reduce using rule 61 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 61 (factor -> VARIABLE .)
    MODULE          reduce using rule 61 (factor -> VARIABLE .)
    EQUAL           reduce using rule 61 (factor -> VARIABLE .)
    UNEQUAL         reduce using rule 61 (factor -> VARIABLE .)
    GREATERTHAN     reduce using rule 61 (factor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 61 (factor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 61 (factor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 61 (factor -> VARIABLE .)
    AND             reduce using rule 61 (factor -> VARIABLE .)
    OR              reduce using rule 61 (factor -> VARIABLE .)
    NOT             reduce using rule 61 (factor -> VARIABLE .)
    SWITCH          reduce using rule 61 (factor -> VARIABLE .)
    FOR             reduce using rule 61 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 61 (factor -> VARIABLE .)
    FMT             reduce using rule 61 (factor -> VARIABLE .)
    VAR             reduce using rule 61 (factor -> VARIABLE .)
    $end            reduce using rule 61 (factor -> VARIABLE .)
    LOCKR           reduce using rule 61 (factor -> VARIABLE .)
    CASE            reduce using rule 61 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 61 (factor -> VARIABLE .)
    COMA            reduce using rule 61 (factor -> VARIABLE .)
    BRACKETR        reduce using rule 61 (factor -> VARIABLE .)
    LOCKL           reduce using rule 61 (factor -> VARIABLE .)
    COLON           reduce using rule 61 (factor -> VARIABLE .)


state 39

    (14) declaracion -> varAssign tipoDato .
    (13) asignacion -> varAssign tipoDato . ASSIGN asignable

    SWITCH          reduce using rule 14 (declaracion -> varAssign tipoDato .)
    FOR             reduce using rule 14 (declaracion -> varAssign tipoDato .)
    VARIABLE        reduce using rule 14 (declaracion -> varAssign tipoDato .)
    FMT             reduce using rule 14 (declaracion -> varAssign tipoDato .)
    VAR             reduce using rule 14 (declaracion -> varAssign tipoDato .)
    $end            reduce using rule 14 (declaracion -> varAssign tipoDato .)
    LOCKR           reduce using rule 14 (declaracion -> varAssign tipoDato .)
    CASE            reduce using rule 14 (declaracion -> varAssign tipoDato .)
    ASSIGN          shift and go to state 72


state 40

    (11) asignacion -> varAssign ASSIGN . asignable
    (15) asignable -> . valor
    (16) asignable -> . expresionMatematica
    (17) asignable -> . condicion
    (59) valor -> . STRING
    (60) valor -> . factor
    (51) expresionMatematica -> . factor operadorMatematico factor
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    asignable                      shift and go to state 73
    valor                          shift and go to state 34
    expresionMatematica            shift and go to state 35
    condicion                      shift and go to state 36
    factor                         shift and go to state 37

state 41

    (45) tipoDato -> INTTYPE .

    ASSIGN          reduce using rule 45 (tipoDato -> INTTYPE .)
    SWITCH          reduce using rule 45 (tipoDato -> INTTYPE .)
    FOR             reduce using rule 45 (tipoDato -> INTTYPE .)
    VARIABLE        reduce using rule 45 (tipoDato -> INTTYPE .)
    FMT             reduce using rule 45 (tipoDato -> INTTYPE .)
    VAR             reduce using rule 45 (tipoDato -> INTTYPE .)
    $end            reduce using rule 45 (tipoDato -> INTTYPE .)
    LOCKR           reduce using rule 45 (tipoDato -> INTTYPE .)
    CASE            reduce using rule 45 (tipoDato -> INTTYPE .)


state 42

    (46) tipoDato -> FLOATTYPE .

    ASSIGN          reduce using rule 46 (tipoDato -> FLOATTYPE .)
    SWITCH          reduce using rule 46 (tipoDato -> FLOATTYPE .)
    FOR             reduce using rule 46 (tipoDato -> FLOATTYPE .)
    VARIABLE        reduce using rule 46 (tipoDato -> FLOATTYPE .)
    FMT             reduce using rule 46 (tipoDato -> FLOATTYPE .)
    VAR             reduce using rule 46 (tipoDato -> FLOATTYPE .)
    $end            reduce using rule 46 (tipoDato -> FLOATTYPE .)
    LOCKR           reduce using rule 46 (tipoDato -> FLOATTYPE .)
    CASE            reduce using rule 46 (tipoDato -> FLOATTYPE .)


state 43

    (47) tipoDato -> BOOLEANTYPE .

    ASSIGN          reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    SWITCH          reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    FOR             reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    VARIABLE        reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    FMT             reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    VAR             reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    $end            reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    LOCKR           reduce using rule 47 (tipoDato -> BOOLEANTYPE .)
    CASE            reduce using rule 47 (tipoDato -> BOOLEANTYPE .)


state 44

    (26) impresionSencilla -> tipoImpresion BRACKETL . valores BRACKETR
    (57) valores -> . valor
    (58) valores -> . valor COMA valores
    (59) valor -> . STRING
    (60) valor -> . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    valores                        shift and go to state 74
    valor                          shift and go to state 75
    factor                         shift and go to state 29

state 45

    (29) impresionBufio -> FMT DOT . FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> FMT DOT . PRINTF BRACKETL STRING COMA valores BRACKETR
    (27) tipoImpresion -> FMT DOT . PRINT
    (28) tipoImpresion -> FMT DOT . PRINTLN

    FPRINT          shift and go to state 76
    PRINTF          shift and go to state 77
    PRINT           shift and go to state 78
    PRINTLN         shift and go to state 79


state 46

    (33) varAssign -> VAR VARIABLE .

    ASSIGN          reduce using rule 33 (varAssign -> VAR VARIABLE .)
    INTTYPE         reduce using rule 33 (varAssign -> VAR VARIABLE .)
    FLOATTYPE       reduce using rule 33 (varAssign -> VAR VARIABLE .)
    BOOLEANTYPE     reduce using rule 33 (varAssign -> VAR VARIABLE .)


state 47

    (18) estructuraControl -> SWITCH VARIABLE LOCKL . cases LOCKR
    (23) cases -> . case
    (24) cases -> . case cases
    (25) case -> . CASE condicionCase COLON main

    CASE            shift and go to state 82

    cases                          shift and go to state 80
    case                           shift and go to state 81

state 48

    (12) asignacion -> VARIABLE ASSIGN asignable .

    SWITCH          reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    FOR             reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    VARIABLE        reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    FMT             reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    VAR             reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    $end            reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    LOCKR           reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    CASE            reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)
    SEMICOLON       reduce using rule 12 (asignacion -> VARIABLE ASSIGN asignable .)


state 49

    (19) estructuraControl -> FOR condicion LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (18) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (19) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (20) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (7) impresion -> . impresionSencilla
    (8) impresion -> . impresionBufio
    (9) impresion -> . impresionFormato
    (14) declaracion -> . varAssign tipoDato
    (31) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (26) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (29) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (33) varAssign -> . VAR VARIABLE
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (27) tipoImpresion -> . FMT DOT PRINT
    (28) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 7
    FOR             shift and go to state 9
    VARIABLE        shift and go to state 8
    FMT             shift and go to state 16
    VAR             shift and go to state 17

    main                           shift and go to state 83
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    varShortAssign                 shift and go to state 10
    impresionSencilla              shift and go to state 11
    impresionBufio                 shift and go to state 12
    impresionFormato               shift and go to state 13
    varAssign                      shift and go to state 14
    tipoImpresion                  shift and go to state 15

state 50

    (20) estructuraControl -> FOR asignacion SEMICOLON . condicion SEMICOLON iterador LOCKL main LOCKR
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (59) valor -> . STRING
    (60) valor -> . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    condicion                      shift and go to state 84
    valor                          shift and go to state 26
    factor                         shift and go to state 29

state 51

    (21) estructuraControl -> FOR VARIABLE COMA . varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (32) varShortAssign -> . VARIABLE SHORTASSIGN

    VARIABLE        shift and go to state 85

    varShortAssign                 shift and go to state 86

state 52

    (22) estructuraControl -> FOR varShortAssign RANGE . VARIABLE LOCKL main LOCKR

    VARIABLE        shift and go to state 87


state 53

    (37) condicion -> valor operadorComparacion . valor
    (59) valor -> . STRING
    (60) valor -> . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    valor                          shift and go to state 88
    factor                         shift and go to state 29

state 54

    (38) condicion -> valor operadorLogico . valor
    (59) valor -> . STRING
    (60) valor -> . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    valor                          shift and go to state 89
    factor                         shift and go to state 29

state 55

    (39) operadorComparacion -> EQUAL .

    STRING          reduce using rule 39 (operadorComparacion -> EQUAL .)
    VARIABLE        reduce using rule 39 (operadorComparacion -> EQUAL .)
    FLOAT           reduce using rule 39 (operadorComparacion -> EQUAL .)
    INTEGER         reduce using rule 39 (operadorComparacion -> EQUAL .)


state 56

    (40) operadorComparacion -> UNEQUAL .

    STRING          reduce using rule 40 (operadorComparacion -> UNEQUAL .)
    VARIABLE        reduce using rule 40 (operadorComparacion -> UNEQUAL .)
    FLOAT           reduce using rule 40 (operadorComparacion -> UNEQUAL .)
    INTEGER         reduce using rule 40 (operadorComparacion -> UNEQUAL .)


state 57

    (41) operadorComparacion -> GREATERTHAN .

    STRING          reduce using rule 41 (operadorComparacion -> GREATERTHAN .)
    VARIABLE        reduce using rule 41 (operadorComparacion -> GREATERTHAN .)
    FLOAT           reduce using rule 41 (operadorComparacion -> GREATERTHAN .)
    INTEGER         reduce using rule 41 (operadorComparacion -> GREATERTHAN .)


state 58

    (42) operadorComparacion -> SMALLERTHAN .

    STRING          reduce using rule 42 (operadorComparacion -> SMALLERTHAN .)
    VARIABLE        reduce using rule 42 (operadorComparacion -> SMALLERTHAN .)
    FLOAT           reduce using rule 42 (operadorComparacion -> SMALLERTHAN .)
    INTEGER         reduce using rule 42 (operadorComparacion -> SMALLERTHAN .)


state 59

    (43) operadorComparacion -> GREATEROREQUALTHAN .

    STRING          reduce using rule 43 (operadorComparacion -> GREATEROREQUALTHAN .)
    VARIABLE        reduce using rule 43 (operadorComparacion -> GREATEROREQUALTHAN .)
    FLOAT           reduce using rule 43 (operadorComparacion -> GREATEROREQUALTHAN .)
    INTEGER         reduce using rule 43 (operadorComparacion -> GREATEROREQUALTHAN .)


state 60

    (44) operadorComparacion -> SMALLEROREQUALTHAN .

    STRING          reduce using rule 44 (operadorComparacion -> SMALLEROREQUALTHAN .)
    VARIABLE        reduce using rule 44 (operadorComparacion -> SMALLEROREQUALTHAN .)
    FLOAT           reduce using rule 44 (operadorComparacion -> SMALLEROREQUALTHAN .)
    INTEGER         reduce using rule 44 (operadorComparacion -> SMALLEROREQUALTHAN .)


state 61

    (48) operadorLogico -> AND .

    STRING          reduce using rule 48 (operadorLogico -> AND .)
    VARIABLE        reduce using rule 48 (operadorLogico -> AND .)
    FLOAT           reduce using rule 48 (operadorLogico -> AND .)
    INTEGER         reduce using rule 48 (operadorLogico -> AND .)


state 62

    (49) operadorLogico -> OR .

    STRING          reduce using rule 49 (operadorLogico -> OR .)
    VARIABLE        reduce using rule 49 (operadorLogico -> OR .)
    FLOAT           reduce using rule 49 (operadorLogico -> OR .)
    INTEGER         reduce using rule 49 (operadorLogico -> OR .)


state 63

    (50) operadorLogico -> NOT .

    STRING          reduce using rule 50 (operadorLogico -> NOT .)
    VARIABLE        reduce using rule 50 (operadorLogico -> NOT .)
    FLOAT           reduce using rule 50 (operadorLogico -> NOT .)
    INTEGER         reduce using rule 50 (operadorLogico -> NOT .)


state 64

    (13) asignacion -> varAssign tipoDato . ASSIGN asignable

    ASSIGN          shift and go to state 72


state 65

    (31) declaracion -> varShortAssign BUFIO DOT . NEWWRITER BRACKETL OS DOT STDOUT BRACKETR

    NEWWRITER       shift and go to state 90


state 66

    (51) expresionMatematica -> factor operadorMatematico . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    factor                         shift and go to state 91

state 67

    (52) operadorMatematico -> PLUS .

    VARIABLE        reduce using rule 52 (operadorMatematico -> PLUS .)
    FLOAT           reduce using rule 52 (operadorMatematico -> PLUS .)
    INTEGER         reduce using rule 52 (operadorMatematico -> PLUS .)


state 68

    (53) operadorMatematico -> MINUS .

    VARIABLE        reduce using rule 53 (operadorMatematico -> MINUS .)
    FLOAT           reduce using rule 53 (operadorMatematico -> MINUS .)
    INTEGER         reduce using rule 53 (operadorMatematico -> MINUS .)


state 69

    (54) operadorMatematico -> TIMES .

    VARIABLE        reduce using rule 54 (operadorMatematico -> TIMES .)
    FLOAT           reduce using rule 54 (operadorMatematico -> TIMES .)
    INTEGER         reduce using rule 54 (operadorMatematico -> TIMES .)


state 70

    (55) operadorMatematico -> DIVIDE .

    VARIABLE        reduce using rule 55 (operadorMatematico -> DIVIDE .)
    FLOAT           reduce using rule 55 (operadorMatematico -> DIVIDE .)
    INTEGER         reduce using rule 55 (operadorMatematico -> DIVIDE .)


state 71

    (56) operadorMatematico -> MODULE .

    VARIABLE        reduce using rule 56 (operadorMatematico -> MODULE .)
    FLOAT           reduce using rule 56 (operadorMatematico -> MODULE .)
    INTEGER         reduce using rule 56 (operadorMatematico -> MODULE .)


state 72

    (13) asignacion -> varAssign tipoDato ASSIGN . asignable
    (15) asignable -> . valor
    (16) asignable -> . expresionMatematica
    (17) asignable -> . condicion
    (59) valor -> . STRING
    (60) valor -> . factor
    (51) expresionMatematica -> . factor operadorMatematico factor
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    asignable                      shift and go to state 92
    valor                          shift and go to state 34
    expresionMatematica            shift and go to state 35
    condicion                      shift and go to state 36
    factor                         shift and go to state 37

state 73

    (11) asignacion -> varAssign ASSIGN asignable .

    SWITCH          reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    FOR             reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    VARIABLE        reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    FMT             reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    VAR             reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    $end            reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    LOCKR           reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    CASE            reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)
    SEMICOLON       reduce using rule 11 (asignacion -> varAssign ASSIGN asignable .)


state 74

    (26) impresionSencilla -> tipoImpresion BRACKETL valores . BRACKETR

    BRACKETR        shift and go to state 93


state 75

    (57) valores -> valor .
    (58) valores -> valor . COMA valores

    BRACKETR        reduce using rule 57 (valores -> valor .)
    COMA            shift and go to state 94


state 76

    (29) impresionBufio -> FMT DOT FPRINT . BRACKETL VARIABLE COMA STRING BRACKETR

    BRACKETL        shift and go to state 95


state 77

    (30) impresionFormato -> FMT DOT PRINTF . BRACKETL STRING COMA valores BRACKETR

    BRACKETL        shift and go to state 96


state 78

    (27) tipoImpresion -> FMT DOT PRINT .

    BRACKETL        reduce using rule 27 (tipoImpresion -> FMT DOT PRINT .)


state 79

    (28) tipoImpresion -> FMT DOT PRINTLN .

    BRACKETL        reduce using rule 28 (tipoImpresion -> FMT DOT PRINTLN .)


state 80

    (18) estructuraControl -> SWITCH VARIABLE LOCKL cases . LOCKR

    LOCKR           shift and go to state 97


state 81

    (23) cases -> case .
    (24) cases -> case . cases
    (23) cases -> . case
    (24) cases -> . case cases
    (25) case -> . CASE condicionCase COLON main

    LOCKR           reduce using rule 23 (cases -> case .)
    CASE            shift and go to state 82

    case                           shift and go to state 81
    cases                          shift and go to state 98

state 82

    (25) case -> CASE . condicionCase COLON main
    (34) condicionCase -> . INTEGER
    (35) condicionCase -> . VARIABLE
    (36) condicionCase -> . condicion
    (37) condicion -> . valor operadorComparacion valor
    (38) condicion -> . valor operadorLogico valor
    (59) valor -> . STRING
    (60) valor -> . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    INTEGER         shift and go to state 100
    VARIABLE        shift and go to state 101
    STRING          shift and go to state 28
    FLOAT           shift and go to state 30

    condicionCase                  shift and go to state 99
    condicion                      shift and go to state 102
    valor                          shift and go to state 26
    factor                         shift and go to state 29

state 83

    (19) estructuraControl -> FOR condicion LOCKL main . LOCKR

    LOCKR           shift and go to state 103


state 84

    (20) estructuraControl -> FOR asignacion SEMICOLON condicion . SEMICOLON iterador LOCKL main LOCKR

    SEMICOLON       shift and go to state 104


state 85

    (32) varShortAssign -> VARIABLE . SHORTASSIGN

    SHORTASSIGN     shift and go to state 21


state 86

    (21) estructuraControl -> FOR VARIABLE COMA varShortAssign . RANGE VARIABLE LOCKL main LOCKR

    RANGE           shift and go to state 105


state 87

    (22) estructuraControl -> FOR varShortAssign RANGE VARIABLE . LOCKL main LOCKR

    LOCKL           shift and go to state 106


state 88

    (37) condicion -> valor operadorComparacion valor .

    LOCKL           reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    SWITCH          reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    FOR             reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    VARIABLE        reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    FMT             reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    VAR             reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    $end            reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    LOCKR           reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    CASE            reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    SEMICOLON       reduce using rule 37 (condicion -> valor operadorComparacion valor .)
    COLON           reduce using rule 37 (condicion -> valor operadorComparacion valor .)


state 89

    (38) condicion -> valor operadorLogico valor .

    LOCKL           reduce using rule 38 (condicion -> valor operadorLogico valor .)
    SWITCH          reduce using rule 38 (condicion -> valor operadorLogico valor .)
    FOR             reduce using rule 38 (condicion -> valor operadorLogico valor .)
    VARIABLE        reduce using rule 38 (condicion -> valor operadorLogico valor .)
    FMT             reduce using rule 38 (condicion -> valor operadorLogico valor .)
    VAR             reduce using rule 38 (condicion -> valor operadorLogico valor .)
    $end            reduce using rule 38 (condicion -> valor operadorLogico valor .)
    LOCKR           reduce using rule 38 (condicion -> valor operadorLogico valor .)
    CASE            reduce using rule 38 (condicion -> valor operadorLogico valor .)
    SEMICOLON       reduce using rule 38 (condicion -> valor operadorLogico valor .)
    COLON           reduce using rule 38 (condicion -> valor operadorLogico valor .)


state 90

    (31) declaracion -> varShortAssign BUFIO DOT NEWWRITER . BRACKETL OS DOT STDOUT BRACKETR

    BRACKETL        shift and go to state 107


state 91

    (51) expresionMatematica -> factor operadorMatematico factor .

    SWITCH          reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    FOR             reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    VARIABLE        reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    FMT             reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    VAR             reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    $end            reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    LOCKR           reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    CASE            reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)
    SEMICOLON       reduce using rule 51 (expresionMatematica -> factor operadorMatematico factor .)


state 92

    (13) asignacion -> varAssign tipoDato ASSIGN asignable .

    SWITCH          reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    FOR             reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    VARIABLE        reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    FMT             reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    VAR             reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    $end            reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    LOCKR           reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    CASE            reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)
    SEMICOLON       reduce using rule 13 (asignacion -> varAssign tipoDato ASSIGN asignable .)


state 93

    (26) impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .

    SWITCH          reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    FOR             reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    VARIABLE        reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    FMT             reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    VAR             reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    $end            reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    LOCKR           reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    CASE            reduce using rule 26 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)


state 94

    (58) valores -> valor COMA . valores
    (57) valores -> . valor
    (58) valores -> . valor COMA valores
    (59) valor -> . STRING
    (60) valor -> . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    valor                          shift and go to state 75
    valores                        shift and go to state 108
    factor                         shift and go to state 29

state 95

    (29) impresionBufio -> FMT DOT FPRINT BRACKETL . VARIABLE COMA STRING BRACKETR

    VARIABLE        shift and go to state 109


state 96

    (30) impresionFormato -> FMT DOT PRINTF BRACKETL . STRING COMA valores BRACKETR

    STRING          shift and go to state 110


state 97

    (18) estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .

    SWITCH          reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    FOR             reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    VARIABLE        reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    FMT             reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    VAR             reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    $end            reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    LOCKR           reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    CASE            reduce using rule 18 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)


state 98

    (24) cases -> case cases .

    LOCKR           reduce using rule 24 (cases -> case cases .)


state 99

    (25) case -> CASE condicionCase . COLON main

    COLON           shift and go to state 111


state 100

    (34) condicionCase -> INTEGER .
    (63) factor -> INTEGER .

    COLON           reduce using rule 34 (condicionCase -> INTEGER .)
    EQUAL           reduce using rule 63 (factor -> INTEGER .)
    UNEQUAL         reduce using rule 63 (factor -> INTEGER .)
    GREATERTHAN     reduce using rule 63 (factor -> INTEGER .)
    SMALLERTHAN     reduce using rule 63 (factor -> INTEGER .)
    GREATEROREQUALTHAN reduce using rule 63 (factor -> INTEGER .)
    SMALLEROREQUALTHAN reduce using rule 63 (factor -> INTEGER .)
    AND             reduce using rule 63 (factor -> INTEGER .)
    OR              reduce using rule 63 (factor -> INTEGER .)
    NOT             reduce using rule 63 (factor -> INTEGER .)


state 101

    (35) condicionCase -> VARIABLE .
    (61) factor -> VARIABLE .

    COLON           reduce using rule 35 (condicionCase -> VARIABLE .)
    EQUAL           reduce using rule 61 (factor -> VARIABLE .)
    UNEQUAL         reduce using rule 61 (factor -> VARIABLE .)
    GREATERTHAN     reduce using rule 61 (factor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 61 (factor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 61 (factor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 61 (factor -> VARIABLE .)
    AND             reduce using rule 61 (factor -> VARIABLE .)
    OR              reduce using rule 61 (factor -> VARIABLE .)
    NOT             reduce using rule 61 (factor -> VARIABLE .)


state 102

    (36) condicionCase -> condicion .

    COLON           reduce using rule 36 (condicionCase -> condicion .)


state 103

    (19) estructuraControl -> FOR condicion LOCKL main LOCKR .

    SWITCH          reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    FOR             reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    VARIABLE        reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    FMT             reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    VAR             reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    $end            reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    LOCKR           reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)
    CASE            reduce using rule 19 (estructuraControl -> FOR condicion LOCKL main LOCKR .)


state 104

    (20) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON . iterador LOCKL main LOCKR
    (64) iterador -> . VARIABLE INCREMENT
    (65) iterador -> . VARIABLE DECREMENT

    VARIABLE        shift and go to state 113

    iterador                       shift and go to state 112

state 105

    (21) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE . VARIABLE LOCKL main LOCKR

    VARIABLE        shift and go to state 114


state 106

    (22) estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (18) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (19) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (20) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (7) impresion -> . impresionSencilla
    (8) impresion -> . impresionBufio
    (9) impresion -> . impresionFormato
    (14) declaracion -> . varAssign tipoDato
    (31) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (26) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (29) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (33) varAssign -> . VAR VARIABLE
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (27) tipoImpresion -> . FMT DOT PRINT
    (28) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 7
    FOR             shift and go to state 9
    VARIABLE        shift and go to state 8
    FMT             shift and go to state 16
    VAR             shift and go to state 17

    varShortAssign                 shift and go to state 10
    main                           shift and go to state 115
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    impresionSencilla              shift and go to state 11
    impresionBufio                 shift and go to state 12
    impresionFormato               shift and go to state 13
    varAssign                      shift and go to state 14
    tipoImpresion                  shift and go to state 15

state 107

    (31) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL . OS DOT STDOUT BRACKETR

    OS              shift and go to state 116


state 108

    (58) valores -> valor COMA valores .

    BRACKETR        reduce using rule 58 (valores -> valor COMA valores .)


state 109

    (29) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE . COMA STRING BRACKETR

    COMA            shift and go to state 117


state 110

    (30) impresionFormato -> FMT DOT PRINTF BRACKETL STRING . COMA valores BRACKETR

    COMA            shift and go to state 118


state 111

    (25) case -> CASE condicionCase COLON . main
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (18) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (19) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (20) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (7) impresion -> . impresionSencilla
    (8) impresion -> . impresionBufio
    (9) impresion -> . impresionFormato
    (14) declaracion -> . varAssign tipoDato
    (31) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (26) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (29) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (33) varAssign -> . VAR VARIABLE
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (27) tipoImpresion -> . FMT DOT PRINT
    (28) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 7
    FOR             shift and go to state 9
    VARIABLE        shift and go to state 8
    FMT             shift and go to state 16
    VAR             shift and go to state 17

    main                           shift and go to state 119
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    varShortAssign                 shift and go to state 10
    impresionSencilla              shift and go to state 11
    impresionBufio                 shift and go to state 12
    impresionFormato               shift and go to state 13
    varAssign                      shift and go to state 14
    tipoImpresion                  shift and go to state 15

state 112

    (20) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador . LOCKL main LOCKR

    LOCKL           shift and go to state 120


state 113

    (64) iterador -> VARIABLE . INCREMENT
    (65) iterador -> VARIABLE . DECREMENT

    INCREMENT       shift and go to state 121
    DECREMENT       shift and go to state 122


state 114

    (21) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE . LOCKL main LOCKR

    LOCKL           shift and go to state 123


state 115

    (22) estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main . LOCKR

    LOCKR           shift and go to state 124


state 116

    (31) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS . DOT STDOUT BRACKETR

    DOT             shift and go to state 125


state 117

    (29) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA . STRING BRACKETR

    STRING          shift and go to state 126


state 118

    (30) impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA . valores BRACKETR
    (57) valores -> . valor
    (58) valores -> . valor COMA valores
    (59) valor -> . STRING
    (60) valor -> . factor
    (61) factor -> . VARIABLE
    (62) factor -> . FLOAT
    (63) factor -> . INTEGER

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 38
    FLOAT           shift and go to state 30
    INTEGER         shift and go to state 31

    valores                        shift and go to state 127
    valor                          shift and go to state 75
    factor                         shift and go to state 29

state 119

    (25) case -> CASE condicionCase COLON main .

    CASE            reduce using rule 25 (case -> CASE condicionCase COLON main .)
    LOCKR           reduce using rule 25 (case -> CASE condicionCase COLON main .)


state 120

    (20) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (18) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (19) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (20) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (7) impresion -> . impresionSencilla
    (8) impresion -> . impresionBufio
    (9) impresion -> . impresionFormato
    (14) declaracion -> . varAssign tipoDato
    (31) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (26) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (29) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (33) varAssign -> . VAR VARIABLE
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (27) tipoImpresion -> . FMT DOT PRINT
    (28) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 7
    FOR             shift and go to state 9
    VARIABLE        shift and go to state 8
    FMT             shift and go to state 16
    VAR             shift and go to state 17

    asignacion                     shift and go to state 6
    main                           shift and go to state 128
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    varShortAssign                 shift and go to state 10
    impresionSencilla              shift and go to state 11
    impresionBufio                 shift and go to state 12
    impresionFormato               shift and go to state 13
    varAssign                      shift and go to state 14
    tipoImpresion                  shift and go to state 15

state 121

    (64) iterador -> VARIABLE INCREMENT .

    LOCKL           reduce using rule 64 (iterador -> VARIABLE INCREMENT .)


state 122

    (65) iterador -> VARIABLE DECREMENT .

    LOCKL           reduce using rule 65 (iterador -> VARIABLE DECREMENT .)


state 123

    (21) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL . main LOCKR
    (1) main -> . ejecutable
    (2) main -> . ejecutable main
    (3) ejecutable -> . estructuraControl
    (4) ejecutable -> . impresion
    (5) ejecutable -> . declaracion
    (6) ejecutable -> . asignacion
    (18) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (19) estructuraControl -> . FOR condicion LOCKL main LOCKR
    (20) estructuraControl -> . FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR
    (21) estructuraControl -> . FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (22) estructuraControl -> . FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR
    (7) impresion -> . impresionSencilla
    (8) impresion -> . impresionBufio
    (9) impresion -> . impresionFormato
    (14) declaracion -> . varAssign tipoDato
    (31) declaracion -> . varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR
    (10) asignacion -> . varShortAssign asignable
    (11) asignacion -> . varAssign ASSIGN asignable
    (12) asignacion -> . VARIABLE ASSIGN asignable
    (13) asignacion -> . varAssign tipoDato ASSIGN asignable
    (26) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (29) impresionBufio -> . FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR
    (30) impresionFormato -> . FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR
    (33) varAssign -> . VAR VARIABLE
    (32) varShortAssign -> . VARIABLE SHORTASSIGN
    (27) tipoImpresion -> . FMT DOT PRINT
    (28) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 7
    FOR             shift and go to state 9
    VARIABLE        shift and go to state 8
    FMT             shift and go to state 16
    VAR             shift and go to state 17

    varShortAssign                 shift and go to state 10
    main                           shift and go to state 129
    ejecutable                     shift and go to state 2
    estructuraControl              shift and go to state 3
    impresion                      shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    impresionSencilla              shift and go to state 11
    impresionBufio                 shift and go to state 12
    impresionFormato               shift and go to state 13
    varAssign                      shift and go to state 14
    tipoImpresion                  shift and go to state 15

state 124

    (22) estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .

    SWITCH          reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FOR             reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VARIABLE        reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FMT             reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VAR             reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    $end            reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    LOCKR           reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    CASE            reduce using rule 22 (estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR .)


state 125

    (31) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT . STDOUT BRACKETR

    STDOUT          shift and go to state 130


state 126

    (29) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING . BRACKETR

    BRACKETR        shift and go to state 131


state 127

    (30) impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores . BRACKETR

    BRACKETR        shift and go to state 132


state 128

    (20) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main . LOCKR

    LOCKR           shift and go to state 133


state 129

    (21) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main . LOCKR

    LOCKR           shift and go to state 134


state 130

    (31) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT . BRACKETR

    BRACKETR        shift and go to state 135


state 131

    (29) impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .

    SWITCH          reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    FOR             reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    VARIABLE        reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    FMT             reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    VAR             reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    $end            reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    LOCKR           reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)
    CASE            reduce using rule 29 (impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR .)


state 132

    (30) impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .

    SWITCH          reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    FOR             reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    VARIABLE        reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    FMT             reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    VAR             reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    $end            reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    LOCKR           reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)
    CASE            reduce using rule 30 (impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR .)


state 133

    (20) estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .

    SWITCH          reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    FOR             reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    VARIABLE        reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    FMT             reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    VAR             reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    $end            reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    LOCKR           reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)
    CASE            reduce using rule 20 (estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR .)


state 134

    (21) estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .

    SWITCH          reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FOR             reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VARIABLE        reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    FMT             reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    VAR             reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    $end            reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    LOCKR           reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)
    CASE            reduce using rule 21 (estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR .)


state 135

    (31) declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .

    SWITCH          reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    FOR             reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    VARIABLE        reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    FMT             reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    VAR             reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    $end            reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    LOCKR           reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)
    CASE            reduce using rule 31 (declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR .)

