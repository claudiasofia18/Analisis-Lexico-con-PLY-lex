Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSON
    APPEND
    ASSIGN
    BOOLEANTYPE
    BRACEL
    BRACER
    BREAK
    BUFIO
    CAP
    CHAN
    CONST
    DECREMENT
    DEFAULT
    DEFER
    DIVIDE
    ELSE
    ERROR
    FALLTHROUGH
    FALSE
    FLOATTYPE
    FOR
    FPRINT
    FRONT
    FUNCION
    GO
    GOTO
    IF
    IMPORT
    INCREMENT
    INTERFACE
    INTTYPE
    LEN
    LIST
    MAP
    MINUS
    MODULE
    NEW
    NEWWRITER
    OS
    PACKAGE
    PLUS
    PUSHBACK
    RANGE
    RETURN
    SCANF
    SELECT
    SEMICOLON
    SHORTASSIGN
    SSCANF
    STDOUT
    STRINGTYPE
    STRUCT
    TIMES
    TRUE
    TYPE
    VAR

Grammar

Rule 0     S' -> ejecutable
Rule 1     ejecutable -> estructuraControl
Rule 2     ejecutable -> impresionSencilla
Rule 3     estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR
Rule 4     cases -> case
Rule 5     cases -> case cases
Rule 6     case -> CASE condicionCase COLON ejecutable
Rule 7     impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR
Rule 8     tipoImpresion -> FMT DOT PRINT
Rule 9     tipoImpresion -> FMT DOT PRINTLN
Rule 10    condicionCase -> INTEGER
Rule 11    condicionCase -> VARIABLE
Rule 12    condicionCase -> condicion
Rule 13    condicion -> valor operadorComparacion valor
Rule 14    condicion -> valor operadorLogico valor
Rule 15    operadorComparacion -> EQUAL
Rule 16    operadorComparacion -> UNEQUAL
Rule 17    operadorComparacion -> GREATERTHAN
Rule 18    operadorComparacion -> SMALLERTHAN
Rule 19    operadorComparacion -> GREATEROREQUALTHAN
Rule 20    operadorComparacion -> SMALLEROREQUALTHAN
Rule 21    operadorLogico -> AND
Rule 22    operadorLogico -> OR
Rule 23    operadorLogico -> NOT
Rule 24    valores -> valor
Rule 25    valores -> valor COMA valores
Rule 26    valor -> STRING
Rule 27    valor -> INTEGER
Rule 28    valor -> FLOAT
Rule 29    valor -> VARIABLE

Terminals, with rules where they appear

AMPERSON             : 
AND                  : 21
APPEND               : 
ASSIGN               : 
BOOLEANTYPE          : 
BRACEL               : 
BRACER               : 
BRACKETL             : 7
BRACKETR             : 7
BREAK                : 
BUFIO                : 
CAP                  : 
CASE                 : 6
CHAN                 : 
COLON                : 6
COMA                 : 25
CONST                : 
DECREMENT            : 
DEFAULT              : 
DEFER                : 
DIVIDE               : 
DOT                  : 8 9
ELSE                 : 
EQUAL                : 15
ERROR                : 
FALLTHROUGH          : 
FALSE                : 
FLOAT                : 28
FLOATTYPE            : 
FMT                  : 8 9
FOR                  : 
FPRINT               : 
FRONT                : 
FUNCION              : 
GO                   : 
GOTO                 : 
GREATEROREQUALTHAN   : 19
GREATERTHAN          : 17
IF                   : 
IMPORT               : 
INCREMENT            : 
INTEGER              : 10 27
INTERFACE            : 
INTTYPE              : 
LEN                  : 
LIST                 : 
LOCKL                : 3
LOCKR                : 3
MAP                  : 
MINUS                : 
MODULE               : 
NEW                  : 
NEWWRITER            : 
NOT                  : 23
OR                   : 22
OS                   : 
PACKAGE              : 
PLUS                 : 
PRINT                : 8
PRINTLN              : 9
PUSHBACK             : 
RANGE                : 
RETURN               : 
SCANF                : 
SELECT               : 
SEMICOLON            : 
SHORTASSIGN          : 
SMALLEROREQUALTHAN   : 20
SMALLERTHAN          : 18
SSCANF               : 
STDOUT               : 
STRING               : 26
STRINGTYPE           : 
STRUCT               : 
SWITCH               : 3
TIMES                : 
TRUE                 : 
TYPE                 : 
UNEQUAL              : 16
VAR                  : 
VARIABLE             : 3 11 29
error                : 

Nonterminals, with rules where they appear

case                 : 4 5
cases                : 3 5
condicion            : 12
condicionCase        : 6
ejecutable           : 6 0
estructuraControl    : 1
impresionSencilla    : 2
operadorComparacion  : 13
operadorLogico       : 14
tipoImpresion        : 7
valor                : 13 13 14 14 24 25
valores              : 7 25

Parsing method: LALR

state 0

    (0) S' -> . ejecutable
    (1) ejecutable -> . estructuraControl
    (2) ejecutable -> . impresionSencilla
    (3) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (7) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (8) tipoImpresion -> . FMT DOT PRINT
    (9) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 4
    FMT             shift and go to state 6

    ejecutable                     shift and go to state 1
    estructuraControl              shift and go to state 2
    impresionSencilla              shift and go to state 3
    tipoImpresion                  shift and go to state 5

state 1

    (0) S' -> ejecutable .



state 2

    (1) ejecutable -> estructuraControl .

    $end            reduce using rule 1 (ejecutable -> estructuraControl .)
    CASE            reduce using rule 1 (ejecutable -> estructuraControl .)
    LOCKR           reduce using rule 1 (ejecutable -> estructuraControl .)


state 3

    (2) ejecutable -> impresionSencilla .

    $end            reduce using rule 2 (ejecutable -> impresionSencilla .)
    CASE            reduce using rule 2 (ejecutable -> impresionSencilla .)
    LOCKR           reduce using rule 2 (ejecutable -> impresionSencilla .)


state 4

    (3) estructuraControl -> SWITCH . VARIABLE LOCKL cases LOCKR

    VARIABLE        shift and go to state 7


state 5

    (7) impresionSencilla -> tipoImpresion . BRACKETL valores BRACKETR

    BRACKETL        shift and go to state 8


state 6

    (8) tipoImpresion -> FMT . DOT PRINT
    (9) tipoImpresion -> FMT . DOT PRINTLN

    DOT             shift and go to state 9


state 7

    (3) estructuraControl -> SWITCH VARIABLE . LOCKL cases LOCKR

    LOCKL           shift and go to state 10


state 8

    (7) impresionSencilla -> tipoImpresion BRACKETL . valores BRACKETR
    (24) valores -> . valor
    (25) valores -> . valor COMA valores
    (26) valor -> . STRING
    (27) valor -> . INTEGER
    (28) valor -> . FLOAT
    (29) valor -> . VARIABLE

    STRING          shift and go to state 13
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    VARIABLE        shift and go to state 16

    valores                        shift and go to state 11
    valor                          shift and go to state 12

state 9

    (8) tipoImpresion -> FMT DOT . PRINT
    (9) tipoImpresion -> FMT DOT . PRINTLN

    PRINT           shift and go to state 17
    PRINTLN         shift and go to state 18


state 10

    (3) estructuraControl -> SWITCH VARIABLE LOCKL . cases LOCKR
    (4) cases -> . case
    (5) cases -> . case cases
    (6) case -> . CASE condicionCase COLON ejecutable

    CASE            shift and go to state 21

    cases                          shift and go to state 19
    case                           shift and go to state 20

state 11

    (7) impresionSencilla -> tipoImpresion BRACKETL valores . BRACKETR

    BRACKETR        shift and go to state 22


state 12

    (24) valores -> valor .
    (25) valores -> valor . COMA valores

    BRACKETR        reduce using rule 24 (valores -> valor .)
    COMA            shift and go to state 23


state 13

    (26) valor -> STRING .

    COMA            reduce using rule 26 (valor -> STRING .)
    BRACKETR        reduce using rule 26 (valor -> STRING .)
    EQUAL           reduce using rule 26 (valor -> STRING .)
    UNEQUAL         reduce using rule 26 (valor -> STRING .)
    GREATERTHAN     reduce using rule 26 (valor -> STRING .)
    SMALLERTHAN     reduce using rule 26 (valor -> STRING .)
    GREATEROREQUALTHAN reduce using rule 26 (valor -> STRING .)
    SMALLEROREQUALTHAN reduce using rule 26 (valor -> STRING .)
    AND             reduce using rule 26 (valor -> STRING .)
    OR              reduce using rule 26 (valor -> STRING .)
    NOT             reduce using rule 26 (valor -> STRING .)
    COLON           reduce using rule 26 (valor -> STRING .)


state 14

    (27) valor -> INTEGER .

    COMA            reduce using rule 27 (valor -> INTEGER .)
    BRACKETR        reduce using rule 27 (valor -> INTEGER .)
    COLON           reduce using rule 27 (valor -> INTEGER .)


state 15

    (28) valor -> FLOAT .

    COMA            reduce using rule 28 (valor -> FLOAT .)
    BRACKETR        reduce using rule 28 (valor -> FLOAT .)
    EQUAL           reduce using rule 28 (valor -> FLOAT .)
    UNEQUAL         reduce using rule 28 (valor -> FLOAT .)
    GREATERTHAN     reduce using rule 28 (valor -> FLOAT .)
    SMALLERTHAN     reduce using rule 28 (valor -> FLOAT .)
    GREATEROREQUALTHAN reduce using rule 28 (valor -> FLOAT .)
    SMALLEROREQUALTHAN reduce using rule 28 (valor -> FLOAT .)
    AND             reduce using rule 28 (valor -> FLOAT .)
    OR              reduce using rule 28 (valor -> FLOAT .)
    NOT             reduce using rule 28 (valor -> FLOAT .)
    COLON           reduce using rule 28 (valor -> FLOAT .)


state 16

    (29) valor -> VARIABLE .

    COMA            reduce using rule 29 (valor -> VARIABLE .)
    BRACKETR        reduce using rule 29 (valor -> VARIABLE .)
    COLON           reduce using rule 29 (valor -> VARIABLE .)


state 17

    (8) tipoImpresion -> FMT DOT PRINT .

    BRACKETL        reduce using rule 8 (tipoImpresion -> FMT DOT PRINT .)


state 18

    (9) tipoImpresion -> FMT DOT PRINTLN .

    BRACKETL        reduce using rule 9 (tipoImpresion -> FMT DOT PRINTLN .)


state 19

    (3) estructuraControl -> SWITCH VARIABLE LOCKL cases . LOCKR

    LOCKR           shift and go to state 24


state 20

    (4) cases -> case .
    (5) cases -> case . cases
    (4) cases -> . case
    (5) cases -> . case cases
    (6) case -> . CASE condicionCase COLON ejecutable

    LOCKR           reduce using rule 4 (cases -> case .)
    CASE            shift and go to state 21

    case                           shift and go to state 20
    cases                          shift and go to state 25

state 21

    (6) case -> CASE . condicionCase COLON ejecutable
    (10) condicionCase -> . INTEGER
    (11) condicionCase -> . VARIABLE
    (12) condicionCase -> . condicion
    (13) condicion -> . valor operadorComparacion valor
    (14) condicion -> . valor operadorLogico valor
    (26) valor -> . STRING
    (27) valor -> . INTEGER
    (28) valor -> . FLOAT
    (29) valor -> . VARIABLE

    INTEGER         shift and go to state 27
    VARIABLE        shift and go to state 28
    STRING          shift and go to state 13
    FLOAT           shift and go to state 15

    condicionCase                  shift and go to state 26
    condicion                      shift and go to state 29
    valor                          shift and go to state 30

state 22

    (7) impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .

    $end            reduce using rule 7 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    CASE            reduce using rule 7 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)
    LOCKR           reduce using rule 7 (impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR .)


state 23

    (25) valores -> valor COMA . valores
    (24) valores -> . valor
    (25) valores -> . valor COMA valores
    (26) valor -> . STRING
    (27) valor -> . INTEGER
    (28) valor -> . FLOAT
    (29) valor -> . VARIABLE

    STRING          shift and go to state 13
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    VARIABLE        shift and go to state 16

    valor                          shift and go to state 12
    valores                        shift and go to state 31

state 24

    (3) estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .

    $end            reduce using rule 3 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    CASE            reduce using rule 3 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)
    LOCKR           reduce using rule 3 (estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR .)


state 25

    (5) cases -> case cases .

    LOCKR           reduce using rule 5 (cases -> case cases .)


state 26

    (6) case -> CASE condicionCase . COLON ejecutable

    COLON           shift and go to state 32


state 27

    (10) condicionCase -> INTEGER .
    (27) valor -> INTEGER .

    COLON           reduce using rule 10 (condicionCase -> INTEGER .)
    EQUAL           reduce using rule 27 (valor -> INTEGER .)
    UNEQUAL         reduce using rule 27 (valor -> INTEGER .)
    GREATERTHAN     reduce using rule 27 (valor -> INTEGER .)
    SMALLERTHAN     reduce using rule 27 (valor -> INTEGER .)
    GREATEROREQUALTHAN reduce using rule 27 (valor -> INTEGER .)
    SMALLEROREQUALTHAN reduce using rule 27 (valor -> INTEGER .)
    AND             reduce using rule 27 (valor -> INTEGER .)
    OR              reduce using rule 27 (valor -> INTEGER .)
    NOT             reduce using rule 27 (valor -> INTEGER .)


state 28

    (11) condicionCase -> VARIABLE .
    (29) valor -> VARIABLE .

    COLON           reduce using rule 11 (condicionCase -> VARIABLE .)
    EQUAL           reduce using rule 29 (valor -> VARIABLE .)
    UNEQUAL         reduce using rule 29 (valor -> VARIABLE .)
    GREATERTHAN     reduce using rule 29 (valor -> VARIABLE .)
    SMALLERTHAN     reduce using rule 29 (valor -> VARIABLE .)
    GREATEROREQUALTHAN reduce using rule 29 (valor -> VARIABLE .)
    SMALLEROREQUALTHAN reduce using rule 29 (valor -> VARIABLE .)
    AND             reduce using rule 29 (valor -> VARIABLE .)
    OR              reduce using rule 29 (valor -> VARIABLE .)
    NOT             reduce using rule 29 (valor -> VARIABLE .)


state 29

    (12) condicionCase -> condicion .

    COLON           reduce using rule 12 (condicionCase -> condicion .)


state 30

    (13) condicion -> valor . operadorComparacion valor
    (14) condicion -> valor . operadorLogico valor
    (15) operadorComparacion -> . EQUAL
    (16) operadorComparacion -> . UNEQUAL
    (17) operadorComparacion -> . GREATERTHAN
    (18) operadorComparacion -> . SMALLERTHAN
    (19) operadorComparacion -> . GREATEROREQUALTHAN
    (20) operadorComparacion -> . SMALLEROREQUALTHAN
    (21) operadorLogico -> . AND
    (22) operadorLogico -> . OR
    (23) operadorLogico -> . NOT

    EQUAL           shift and go to state 35
    UNEQUAL         shift and go to state 36
    GREATERTHAN     shift and go to state 37
    SMALLERTHAN     shift and go to state 38
    GREATEROREQUALTHAN shift and go to state 39
    SMALLEROREQUALTHAN shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    NOT             shift and go to state 43

    operadorComparacion            shift and go to state 33
    operadorLogico                 shift and go to state 34

state 31

    (25) valores -> valor COMA valores .

    BRACKETR        reduce using rule 25 (valores -> valor COMA valores .)


state 32

    (6) case -> CASE condicionCase COLON . ejecutable
    (1) ejecutable -> . estructuraControl
    (2) ejecutable -> . impresionSencilla
    (3) estructuraControl -> . SWITCH VARIABLE LOCKL cases LOCKR
    (7) impresionSencilla -> . tipoImpresion BRACKETL valores BRACKETR
    (8) tipoImpresion -> . FMT DOT PRINT
    (9) tipoImpresion -> . FMT DOT PRINTLN

    SWITCH          shift and go to state 4
    FMT             shift and go to state 6

    ejecutable                     shift and go to state 44
    estructuraControl              shift and go to state 2
    impresionSencilla              shift and go to state 3
    tipoImpresion                  shift and go to state 5

state 33

    (13) condicion -> valor operadorComparacion . valor
    (26) valor -> . STRING
    (27) valor -> . INTEGER
    (28) valor -> . FLOAT
    (29) valor -> . VARIABLE

    STRING          shift and go to state 13
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    VARIABLE        shift and go to state 16

    valor                          shift and go to state 45

state 34

    (14) condicion -> valor operadorLogico . valor
    (26) valor -> . STRING
    (27) valor -> . INTEGER
    (28) valor -> . FLOAT
    (29) valor -> . VARIABLE

    STRING          shift and go to state 13
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 15
    VARIABLE        shift and go to state 16

    valor                          shift and go to state 46

state 35

    (15) operadorComparacion -> EQUAL .

    STRING          reduce using rule 15 (operadorComparacion -> EQUAL .)
    INTEGER         reduce using rule 15 (operadorComparacion -> EQUAL .)
    FLOAT           reduce using rule 15 (operadorComparacion -> EQUAL .)
    VARIABLE        reduce using rule 15 (operadorComparacion -> EQUAL .)


state 36

    (16) operadorComparacion -> UNEQUAL .

    STRING          reduce using rule 16 (operadorComparacion -> UNEQUAL .)
    INTEGER         reduce using rule 16 (operadorComparacion -> UNEQUAL .)
    FLOAT           reduce using rule 16 (operadorComparacion -> UNEQUAL .)
    VARIABLE        reduce using rule 16 (operadorComparacion -> UNEQUAL .)


state 37

    (17) operadorComparacion -> GREATERTHAN .

    STRING          reduce using rule 17 (operadorComparacion -> GREATERTHAN .)
    INTEGER         reduce using rule 17 (operadorComparacion -> GREATERTHAN .)
    FLOAT           reduce using rule 17 (operadorComparacion -> GREATERTHAN .)
    VARIABLE        reduce using rule 17 (operadorComparacion -> GREATERTHAN .)


state 38

    (18) operadorComparacion -> SMALLERTHAN .

    STRING          reduce using rule 18 (operadorComparacion -> SMALLERTHAN .)
    INTEGER         reduce using rule 18 (operadorComparacion -> SMALLERTHAN .)
    FLOAT           reduce using rule 18 (operadorComparacion -> SMALLERTHAN .)
    VARIABLE        reduce using rule 18 (operadorComparacion -> SMALLERTHAN .)


state 39

    (19) operadorComparacion -> GREATEROREQUALTHAN .

    STRING          reduce using rule 19 (operadorComparacion -> GREATEROREQUALTHAN .)
    INTEGER         reduce using rule 19 (operadorComparacion -> GREATEROREQUALTHAN .)
    FLOAT           reduce using rule 19 (operadorComparacion -> GREATEROREQUALTHAN .)
    VARIABLE        reduce using rule 19 (operadorComparacion -> GREATEROREQUALTHAN .)


state 40

    (20) operadorComparacion -> SMALLEROREQUALTHAN .

    STRING          reduce using rule 20 (operadorComparacion -> SMALLEROREQUALTHAN .)
    INTEGER         reduce using rule 20 (operadorComparacion -> SMALLEROREQUALTHAN .)
    FLOAT           reduce using rule 20 (operadorComparacion -> SMALLEROREQUALTHAN .)
    VARIABLE        reduce using rule 20 (operadorComparacion -> SMALLEROREQUALTHAN .)


state 41

    (21) operadorLogico -> AND .

    STRING          reduce using rule 21 (operadorLogico -> AND .)
    INTEGER         reduce using rule 21 (operadorLogico -> AND .)
    FLOAT           reduce using rule 21 (operadorLogico -> AND .)
    VARIABLE        reduce using rule 21 (operadorLogico -> AND .)


state 42

    (22) operadorLogico -> OR .

    STRING          reduce using rule 22 (operadorLogico -> OR .)
    INTEGER         reduce using rule 22 (operadorLogico -> OR .)
    FLOAT           reduce using rule 22 (operadorLogico -> OR .)
    VARIABLE        reduce using rule 22 (operadorLogico -> OR .)


state 43

    (23) operadorLogico -> NOT .

    STRING          reduce using rule 23 (operadorLogico -> NOT .)
    INTEGER         reduce using rule 23 (operadorLogico -> NOT .)
    FLOAT           reduce using rule 23 (operadorLogico -> NOT .)
    VARIABLE        reduce using rule 23 (operadorLogico -> NOT .)


state 44

    (6) case -> CASE condicionCase COLON ejecutable .

    CASE            reduce using rule 6 (case -> CASE condicionCase COLON ejecutable .)
    LOCKR           reduce using rule 6 (case -> CASE condicionCase COLON ejecutable .)


state 45

    (13) condicion -> valor operadorComparacion valor .

    COLON           reduce using rule 13 (condicion -> valor operadorComparacion valor .)


state 46

    (14) condicion -> valor operadorLogico valor .

    COLON           reduce using rule 14 (condicion -> valor operadorLogico valor .)

