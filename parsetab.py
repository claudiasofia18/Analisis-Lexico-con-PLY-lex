
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSON AND APPEND BOOLEANTYPE BREAK BUFIO CAP CASE CHAN COMA CONST CORCHETED CORCHETEI DECREMENT DEFAULT DEFER DIVIDE DOSPUNTOS DSHORTVAR ELSE EQUAL ERROR FALLTHROUGH FALSE FLOAT FLOATTYPE FMT FOR FPRINT FRONT FUNCION GO GOTO GREATEROREQUALTHAN GREATERTHAN IF IMPORT INCREMENT INIVAR INTEGER INTERFACE INTTYPE LEN LIST LLAVED LLAVEI MAP MINUS MODULE NEW NEWLINE NEWWRITER NOT OR OS PACKAGE PARENTESISD PARENTESISI PLUS PRINT PRINTD PRINTF PRINTLN PRINTS PUNTO PUNTOYCOMA PUSHBACK RANGE RETURN SCANF SELECT SMALLEROREQUALTHAN SMALLERTHAN SSCANF STDOUT STRING STRINGTYPE STRUCT SWITCH TIMES TRUE TYPE UNEQUAL VAR VARIABLE\n    cuerpo : asignacion\n            | impresionsencilla\n            | impresionformato\n            | impressionbufio\n            | impresion\n            | valor\n            | switch\n            | cases\n            | cap_slice\n            | declaracion_slice\n            | dato\n            | len_slice\n            | forCondicionParo\n            | forEstandar\n            | forRango\n            | listaPushBack\n            | cabecerafunction\n            | arguments\n            | listaFront\n            | append_slice\n            | slicevacio\n            | lecturaScanf\n            | lecturaSscanf\n\n     asignacion : declaracionEntero INIVAR expEntero\n                    | declaracionFloat INIVAR expFloat\n                    | declaracionBool INIVAR expBool\n    impresionsencilla : tipoimpresion PARENTESISI expresion PARENTESISD\n                            | tipoimpresion PARENTESISI expresiones PARENTESISD\n     impresionformato : FMT PUNTO PRINTF PARENTESISI STRING COMA expresion PARENTESISD\n                           | FMT PUNTO PRINTF PARENTESISI STRING COMA expresiones PARENTESISD\n    impressionbufio : VARIABLE DSHORTVAR BUFIO PUNTO NEWWRITER PARENTESISI OS PUNTO STDOUT PARENTESISI NEWLINE impresion\n    impresion : FMT PUNTO FPRINT PARENTESISI VARIABLE COMA tipodedato\n    declaracion_slice : VAR VARIABLE INIVAR CORCHETEI CORCHETED LLAVEI expresion LLAVED\n                          | VAR VARIABLE INIVAR CORCHETEI CORCHETED LLAVEI expresiones LLAVED\n                          | VAR VARIABLE INIVAR NEW PARENTESISI CORCHETEI INTEGER CORCHETED dato PARENTESISD CORCHETEI INTEGER DOSPUNTOS CORCHETED\n                          | VARIABLE DSHORTVAR slice CORCHETEI DOSPUNTOS CORCHETED\n                          | VARIABLE DSHORTVAR slice CORCHETEI INTEGER DOSPUNTOS CORCHETED\n                          | VARIABLE DSHORTVAR slice CORCHETEI DOSPUNTOS INTEGER CORCHETED\n                          | VARIABLE DSHORTVAR slice CORCHETEI INTEGER DOSPUNTOS INTEGER CORCHETED\n    len_slice : LEN CORCHETEI slice CORCHETED\n    append_slice : slice INIVAR APPEND PARENTESISI slice COMA expresion\n                     | slice INIVAR APPEND PARENTESISI slice COMA expresiones\n    cap_slice : CAP CORCHETEI slice CORCHETED\n    switch : SWITCH VARIABLE LLAVEI NEWLINE CASE valor DOSPUNTOS NEWLINE impresionsencilla cases LLAVED\n    \n    forCondicionParo : FOR condicion LLAVEI asignacion INCREMENT LLAVED\n                     | FOR condicion LLAVEI asignacion DECREMENT LLAVED\n    \n    forEstandar : FOR asignacion PUNTOYCOMA condicion PUNTOYCOMA INCREMENT LLAVEI asignacion LLAVED\n                | FOR asignacion PUNTOYCOMA condicion PUNTOYCOMA DECREMENT LLAVEI asignacion LLAVED\n    \n    forRango : FOR VARIABLE COMA VARIABLE DSHORTVAR RANGE VARIABLE LLAVEI asignacion LLAVED\n             | FOR VARIABLE DSHORTVAR RANGE VARIABLE LLAVEI asignacion LLAVED\n    expresion : tipodedato\n    expresiones : tipodedato COMA tipodedato\n    \n    listaPushBack : VARIABLE PUNTO PUSHBACK PARENTESISI tipodedato PARENTESISD\n    cases : CASE valor DOSPUNTOS NEWLINE impresionsencilla\n              | DEFAULT DOSPUNTOS NEWLINE impresionsencilla\n    valor : condicion\n              | VARIABLE\n              | TRUE\n              | FALSE\n    \n        condicion : tipodedato comparacion tipodedato\n                 |  tipodedato comparacion VARIABLE\n                 |  VARIABLE comparacion VARIABLE\n                 |  condicion logical condicion\n    expFloat :    FLOAT\n                   | VARIABLE\n                   | FLOAT signo expFloat\n                   | VARIABLE signo expFloat\n     cabecerafunction : FUNCION VARIABLE PARENTESISI arguments PARENTESISD   arguments : argument COMA argument\n                    | argument\n     argument : VARIABLE dato slicevacio : VAR VARIABLE CORCHETEI CORCHETED dato\n    dato : INTTYPE\n             | FLOATTYPE\n             | BOOLEANTYPE\n             | STRINGTYPE\n     expEntero :  INTEGER\n                    | INTEGER signo expEntero\n                    | VARIABLE\n    signo : PLUS\n             | MINUS\n             | TIMES\n             | DIVIDE\n             | MODULE\n     logical : AND\n                | OR\n                | NOT\n    slice : VARIABLE\n    comparacion :  EQUAL\n                    | UNEQUAL\n                    | GREATERTHAN\n                    | SMALLERTHAN\n                    | GREATEROREQUALTHAN\n                    | SMALLEROREQUALTHAN\n    declaracionBool : VAR VARIABLE BOOLEANTYPE\n                        |  VARIABLE DSHORTVAR\n                        |  VAR VARIABLE\n     expBool : TRUE\n                | FALSE\n    declaracionFloat :      VAR VARIABLE FLOATTYPE\n                            |  VARIABLE DSHORTVAR\n                            |  VAR VARIABLE\n    declaracionEntero : VAR VARIABLE INTTYPE\n                        |  VARIABLE DSHORTVAR\n                        |  VAR VARIABLE\n    \n    listaFront : VARIABLE PUNTO FRONT PARENTESISI  PARENTESISD\n    tipodedato : STRING\n                    | INTEGER\n                    | FLOAT\n                    | VARIABLE\n    \n    lecturaSscanf : FMT PUNTO SSCANF PARENTESISI STRING COMA STRING COMA AMPERSON VARIABLE PARENTESISD\n    tipoimpresion : FMT PUNTO PRINT\n                         | FMT PUNTO PRINTLN\n    \n    lecturaScanf : FMT PUNTO SCANF PARENTESISI STRING COMA AMPERSON VARIABLE PARENTESISD\n    \n    listaDeclaracion : VARIABLE DSHORTVAR LIST PUNTO NEW PARENTESISI PARENTESISD\n    '
    
_lr_action_items = {'FMT':([0,117,154,240,262,],[29,156,156,156,266,]),'VARIABLE':([0,36,37,41,48,49,52,53,55,57,59,61,62,63,64,65,66,67,68,69,70,71,76,79,83,85,126,127,128,131,134,135,136,137,138,139,140,141,144,146,151,158,167,182,196,197,206,207,213,214,218,230,231,246,249,],[31,72,74,78,82,84,88,91,98,105,110,-89,-90,-91,-92,-93,-94,112,114,-85,-86,-87,105,105,130,133,164,114,166,133,88,-80,-81,-82,-83,-84,91,91,98,174,98,105,194,74,98,98,98,98,232,164,236,164,164,164,256,]),'TRUE':([0,37,54,182,],[34,34,93,34,]),'FALSE':([0,37,54,182,],[35,35,94,35,]),'SWITCH':([0,],[36,]),'CASE':([0,142,143,153,251,],[37,-27,-28,182,37,]),'DEFAULT':([0,142,143,251,],[38,-27,-28,38,]),'CAP':([0,],[39,]),'VAR':([0,48,126,214,230,231,246,],[41,83,83,83,83,83,83,]),'INTTYPE':([0,31,78,130,133,161,243,],[43,43,122,122,43,43,43,]),'FLOATTYPE':([0,31,78,130,133,161,243,],[44,44,123,123,44,44,44,]),'BOOLEANTYPE':([0,31,78,130,133,161,243,],[45,45,124,124,45,45,45,]),'STRINGTYPE':([0,31,133,161,243,],[46,46,46,46,46,]),'LEN':([0,],[47,]),'FOR':([0,],[48,]),'FUNCION':([0,],[49,]),'STRING':([0,37,48,55,61,62,63,64,65,66,67,68,69,70,71,127,144,145,147,148,151,182,196,197,199,206,207,],[30,30,30,30,-89,-90,-91,-92,-93,-94,30,30,-85,-86,-87,30,30,173,175,176,30,30,30,30,219,30,30,]),'INTEGER':([0,37,48,52,55,61,62,63,64,65,66,67,68,69,70,71,127,134,135,136,137,138,139,144,150,151,178,182,196,197,203,206,207,208,264,],[42,42,42,87,42,-89,-90,-91,-92,-93,-94,42,42,-85,-86,-87,42,87,-80,-81,-82,-83,-84,42,179,42,202,42,42,42,222,42,42,229,267,]),'FLOAT':([0,37,48,53,55,61,62,63,64,65,66,67,68,69,70,71,127,135,136,137,138,139,140,141,144,151,182,196,197,206,207,],[51,51,51,90,51,-89,-90,-91,-92,-93,-94,51,51,-85,-86,-87,51,-80,-81,-82,-83,-84,90,90,51,51,51,51,51,51,51,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,30,31,33,34,35,42,43,44,45,46,50,51,60,86,87,88,89,90,91,92,93,94,97,98,110,111,112,113,132,142,143,155,157,162,169,170,171,172,181,183,188,195,201,204,209,210,217,221,223,225,226,234,235,239,241,242,247,248,253,254,260,261,263,265,270,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-107,-57,-56,-58,-59,-108,-73,-74,-75,-76,-70,-109,-71,-24,-77,-79,-25,-64,-65,-26,-98,-99,-51,-110,-62,-60,-61,-63,-69,-27,-28,-55,-43,-40,-78,-66,-67,-52,-106,-54,-72,-68,-36,-53,-45,-46,-32,-38,-37,-41,-42,-29,-30,-39,-33,-34,-50,-114,-47,-48,-49,-111,-44,-31,-35,]),'INIVAR':([25,26,27,31,40,57,78,122,123,124,129,130,191,],[52,53,54,-88,77,-96,120,-103,-100,-95,-96,-97,-96,]),'PARENTESISI':([28,84,99,100,101,102,103,104,108,109,119,160,177,250,],[55,131,145,146,147,148,-112,-113,151,152,158,187,200,257,]),'PUNTO':([29,31,106,156,220,266,],[56,58,149,184,238,268,]),'EQUAL':([30,31,32,42,51,74,82,114,],[-107,61,61,-108,-109,61,61,61,]),'UNEQUAL':([30,31,32,42,51,74,82,114,],[-107,62,62,-108,-109,62,62,62,]),'GREATERTHAN':([30,31,32,42,51,74,82,114,],[-107,63,63,-108,-109,63,63,63,]),'SMALLERTHAN':([30,31,32,42,51,74,82,114,],[-107,64,64,-108,-109,64,64,64,]),'GREATEROREQUALTHAN':([30,31,32,42,51,74,82,114,],[-107,65,65,-108,-109,65,65,65,]),'SMALLEROREQUALTHAN':([30,31,32,42,51,74,82,114,],[-107,66,66,-108,-109,66,66,66,]),'COMA':([30,42,43,44,45,46,50,51,60,82,97,98,105,173,174,175,176,185,219,],[-107,-108,-73,-74,-75,-76,85,-109,-71,128,144,-110,-88,196,197,198,199,206,237,]),'PARENTESISD':([30,42,43,44,45,46,50,51,60,95,96,97,98,132,152,168,172,180,215,216,236,252,256,],[-107,-108,-73,-74,-75,-76,-70,-109,-71,142,143,-51,-110,-69,181,195,-52,204,234,235,248,259,261,]),'AND':([30,33,42,51,80,110,111,112,113,165,],[-107,69,-108,-109,69,-62,-60,-61,69,69,]),'OR':([30,33,42,51,80,110,111,112,113,165,],[-107,70,-108,-109,70,-62,-60,-61,70,70,]),'NOT':([30,33,42,51,80,110,111,112,113,165,],[-107,71,-108,-109,71,-62,-60,-61,71,71,]),'DOSPUNTOS':([30,33,34,35,38,42,51,73,74,110,111,112,113,150,179,205,267,],[-107,-56,-58,-59,75,-108,-109,116,-57,-62,-60,-61,-63,178,203,224,269,]),'LLAVEI':([30,42,51,72,80,110,111,112,113,186,194,211,212,232,],[-107,-108,-109,115,126,-62,-60,-61,-63,207,214,230,231,246,]),'PUNTOYCOMA':([30,42,51,81,86,87,88,89,90,91,92,93,94,110,111,112,113,165,169,170,171,],[-107,-108,-109,127,-24,-77,-79,-25,-64,-65,-26,-98,-99,-62,-60,-61,-63,192,-78,-66,-67,]),'LLAVED':([30,42,51,86,87,88,89,90,91,92,93,94,97,98,142,143,155,169,170,171,172,183,189,190,227,228,233,244,245,255,258,],[-107,-108,-109,-24,-77,-79,-25,-64,-65,-26,-98,-99,-51,-110,-27,-28,-55,-78,-66,-67,-52,-54,209,210,241,242,247,253,254,260,263,]),'DSHORTVAR':([31,82,164,166,],[57,129,191,193,]),'CORCHETEI':([39,47,78,105,107,120,187,259,],[76,79,121,-88,150,159,208,264,]),'PRINTF':([56,],[99,]),'FPRINT':([56,268,],[100,100,]),'SCANF':([56,],[101,]),'SSCANF':([56,],[102,]),'PRINT':([56,184,],[103,103,]),'PRINTLN':([56,184,],[104,104,]),'BUFIO':([57,],[106,]),'PUSHBACK':([58,],[108,]),'FRONT':([58,],[109,]),'NEWLINE':([75,115,116,224,257,],[117,153,154,240,262,]),'APPEND':([77,],[119,]),'INCREMENT':([86,87,88,89,90,91,92,93,94,163,169,170,171,192,],[-24,-77,-79,-25,-64,-65,-26,-98,-99,189,-78,-66,-67,211,]),'DECREMENT':([86,87,88,89,90,91,92,93,94,163,169,170,171,192,],[-24,-77,-79,-25,-64,-65,-26,-98,-99,190,-78,-66,-67,212,]),'PLUS':([87,90,91,],[135,135,135,]),'MINUS':([87,90,91,],[136,136,136,]),'TIMES':([87,90,91,],[137,137,137,]),'DIVIDE':([87,90,91,],[138,138,138,]),'MODULE':([87,90,91,],[139,139,139,]),'CORCHETED':([105,118,121,125,159,178,202,203,222,229,269,],[-88,157,161,162,186,201,221,223,239,243,270,]),'NEW':([120,],[160,]),'RANGE':([129,193,],[167,213,]),'NEWWRITER':([149,],[177,]),'AMPERSON':([198,237,],[218,249,]),'OS':([200,],[220,]),'STDOUT':([238,],[250,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'asignacion':([0,48,126,214,230,231,246,],[2,81,163,233,244,245,255,]),'impresionsencilla':([0,117,154,240,],[3,155,183,251,]),'impresionformato':([0,],[4,]),'impressionbufio':([0,],[5,]),'impresion':([0,262,],[6,265,]),'valor':([0,37,182,],[7,73,205,]),'switch':([0,],[8,]),'cases':([0,251,],[9,258,]),'cap_slice':([0,],[10,]),'declaracion_slice':([0,],[11,]),'dato':([0,31,133,161,243,],[12,60,60,188,252,]),'len_slice':([0,],[13,]),'forCondicionParo':([0,],[14,]),'forEstandar':([0,],[15,]),'forRango':([0,],[16,]),'listaPushBack':([0,],[17,]),'cabecerafunction':([0,],[18,]),'arguments':([0,131,],[19,168,]),'listaFront':([0,],[20,]),'append_slice':([0,],[21,]),'slicevacio':([0,],[22,]),'lecturaScanf':([0,],[23,]),'lecturaSscanf':([0,],[24,]),'declaracionEntero':([0,48,126,214,230,231,246,],[25,25,25,25,25,25,25,]),'declaracionFloat':([0,48,126,214,230,231,246,],[26,26,26,26,26,26,26,]),'declaracionBool':([0,48,126,214,230,231,246,],[27,27,27,27,27,27,27,]),'tipoimpresion':([0,117,154,240,],[28,28,28,28,]),'tipodedato':([0,37,48,55,67,68,127,144,151,182,196,197,206,207,],[32,32,32,97,111,32,32,172,180,32,97,217,97,97,]),'condicion':([0,37,48,68,127,182,],[33,33,80,113,165,33,]),'slice':([0,57,76,79,158,],[40,107,118,125,185,]),'argument':([0,85,131,],[50,132,50,]),'comparacion':([31,32,74,82,114,],[59,67,59,59,59,]),'logical':([33,80,113,165,],[68,68,68,68,]),'expEntero':([52,134,],[86,169,]),'expFloat':([53,140,141,],[89,170,171,]),'expBool':([54,],[92,]),'expresion':([55,196,206,207,],[95,215,225,227,]),'expresiones':([55,196,206,207,],[96,216,226,228,]),'signo':([87,90,91,],[134,140,141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','golangsintax.py',24),
  ('cuerpo -> impresionsencilla','cuerpo',1,'p_cuerpo','golangsintax.py',25),
  ('cuerpo -> impresionformato','cuerpo',1,'p_cuerpo','golangsintax.py',26),
  ('cuerpo -> impressionbufio','cuerpo',1,'p_cuerpo','golangsintax.py',27),
  ('cuerpo -> impresion','cuerpo',1,'p_cuerpo','golangsintax.py',28),
  ('cuerpo -> valor','cuerpo',1,'p_cuerpo','golangsintax.py',29),
  ('cuerpo -> switch','cuerpo',1,'p_cuerpo','golangsintax.py',30),
  ('cuerpo -> cases','cuerpo',1,'p_cuerpo','golangsintax.py',31),
  ('cuerpo -> cap_slice','cuerpo',1,'p_cuerpo','golangsintax.py',32),
  ('cuerpo -> declaracion_slice','cuerpo',1,'p_cuerpo','golangsintax.py',33),
  ('cuerpo -> dato','cuerpo',1,'p_cuerpo','golangsintax.py',34),
  ('cuerpo -> len_slice','cuerpo',1,'p_cuerpo','golangsintax.py',35),
  ('cuerpo -> forCondicionParo','cuerpo',1,'p_cuerpo','golangsintax.py',36),
  ('cuerpo -> forEstandar','cuerpo',1,'p_cuerpo','golangsintax.py',37),
  ('cuerpo -> forRango','cuerpo',1,'p_cuerpo','golangsintax.py',38),
  ('cuerpo -> listaPushBack','cuerpo',1,'p_cuerpo','golangsintax.py',39),
  ('cuerpo -> cabecerafunction','cuerpo',1,'p_cuerpo','golangsintax.py',40),
  ('cuerpo -> arguments','cuerpo',1,'p_cuerpo','golangsintax.py',41),
  ('cuerpo -> listaFront','cuerpo',1,'p_cuerpo','golangsintax.py',42),
  ('cuerpo -> append_slice','cuerpo',1,'p_cuerpo','golangsintax.py',43),
  ('cuerpo -> slicevacio','cuerpo',1,'p_cuerpo','golangsintax.py',44),
  ('cuerpo -> lecturaScanf','cuerpo',1,'p_cuerpo','golangsintax.py',45),
  ('cuerpo -> lecturaSscanf','cuerpo',1,'p_cuerpo','golangsintax.py',46),
  ('asignacion -> declaracionEntero INIVAR expEntero','asignacion',3,'p_asignacion','golangsintax.py',53),
  ('asignacion -> declaracionFloat INIVAR expFloat','asignacion',3,'p_asignacion','golangsintax.py',54),
  ('asignacion -> declaracionBool INIVAR expBool','asignacion',3,'p_asignacion','golangsintax.py',55),
  ('impresionsencilla -> tipoimpresion PARENTESISI expresion PARENTESISD','impresionsencilla',4,'p_impresionsencilla','golangsintax.py',61),
  ('impresionsencilla -> tipoimpresion PARENTESISI expresiones PARENTESISD','impresionsencilla',4,'p_impresionsencilla','golangsintax.py',62),
  ('impresionformato -> FMT PUNTO PRINTF PARENTESISI STRING COMA expresion PARENTESISD','impresionformato',8,'p_impresionformato','golangsintax.py',71),
  ('impresionformato -> FMT PUNTO PRINTF PARENTESISI STRING COMA expresiones PARENTESISD','impresionformato',8,'p_impresionformato','golangsintax.py',72),
  ('impressionbufio -> VARIABLE DSHORTVAR BUFIO PUNTO NEWWRITER PARENTESISI OS PUNTO STDOUT PARENTESISI NEWLINE impresion','impressionbufio',12,'p_impressionbufio','golangsintax.py',84),
  ('impresion -> FMT PUNTO FPRINT PARENTESISI VARIABLE COMA tipodedato','impresion',7,'p_impresion','golangsintax.py',90),
  ('declaracion_slice -> VAR VARIABLE INIVAR CORCHETEI CORCHETED LLAVEI expresion LLAVED','declaracion_slice',8,'p_declaracion_slice','golangsintax.py',96),
  ('declaracion_slice -> VAR VARIABLE INIVAR CORCHETEI CORCHETED LLAVEI expresiones LLAVED','declaracion_slice',8,'p_declaracion_slice','golangsintax.py',97),
  ('declaracion_slice -> VAR VARIABLE INIVAR NEW PARENTESISI CORCHETEI INTEGER CORCHETED dato PARENTESISD CORCHETEI INTEGER DOSPUNTOS CORCHETED','declaracion_slice',14,'p_declaracion_slice','golangsintax.py',98),
  ('declaracion_slice -> VARIABLE DSHORTVAR slice CORCHETEI DOSPUNTOS CORCHETED','declaracion_slice',6,'p_declaracion_slice','golangsintax.py',99),
  ('declaracion_slice -> VARIABLE DSHORTVAR slice CORCHETEI INTEGER DOSPUNTOS CORCHETED','declaracion_slice',7,'p_declaracion_slice','golangsintax.py',100),
  ('declaracion_slice -> VARIABLE DSHORTVAR slice CORCHETEI DOSPUNTOS INTEGER CORCHETED','declaracion_slice',7,'p_declaracion_slice','golangsintax.py',101),
  ('declaracion_slice -> VARIABLE DSHORTVAR slice CORCHETEI INTEGER DOSPUNTOS INTEGER CORCHETED','declaracion_slice',8,'p_declaracion_slice','golangsintax.py',102),
  ('len_slice -> LEN CORCHETEI slice CORCHETED','len_slice',4,'p_len_slice','golangsintax.py',108),
  ('append_slice -> slice INIVAR APPEND PARENTESISI slice COMA expresion','append_slice',7,'p_append_slice','golangsintax.py',114),
  ('append_slice -> slice INIVAR APPEND PARENTESISI slice COMA expresiones','append_slice',7,'p_append_slice','golangsintax.py',115),
  ('cap_slice -> CAP CORCHETEI slice CORCHETED','cap_slice',4,'p_cap_slice','golangsintax.py',121),
  ('switch -> SWITCH VARIABLE LLAVEI NEWLINE CASE valor DOSPUNTOS NEWLINE impresionsencilla cases LLAVED','switch',11,'p_switch','golangsintax.py',129),
  ('forCondicionParo -> FOR condicion LLAVEI asignacion INCREMENT LLAVED','forCondicionParo',6,'p_forCondicionParo','golangsintax.py',144),
  ('forCondicionParo -> FOR condicion LLAVEI asignacion DECREMENT LLAVED','forCondicionParo',6,'p_forCondicionParo','golangsintax.py',145),
  ('forEstandar -> FOR asignacion PUNTOYCOMA condicion PUNTOYCOMA INCREMENT LLAVEI asignacion LLAVED','forEstandar',9,'p_forEstandar','golangsintax.py',152),
  ('forEstandar -> FOR asignacion PUNTOYCOMA condicion PUNTOYCOMA DECREMENT LLAVEI asignacion LLAVED','forEstandar',9,'p_forEstandar','golangsintax.py',153),
  ('forRango -> FOR VARIABLE COMA VARIABLE DSHORTVAR RANGE VARIABLE LLAVEI asignacion LLAVED','forRango',10,'p_forRango','golangsintax.py',160),
  ('forRango -> FOR VARIABLE DSHORTVAR RANGE VARIABLE LLAVEI asignacion LLAVED','forRango',8,'p_forRango','golangsintax.py',161),
  ('expresion -> tipodedato','expresion',1,'p_expresion','golangsintax.py',171),
  ('expresiones -> tipodedato COMA tipodedato','expresiones',3,'p_expresiones','golangsintax.py',177),
  ('listaPushBack -> VARIABLE PUNTO PUSHBACK PARENTESISI tipodedato PARENTESISD','listaPushBack',6,'p_PushBack','golangsintax.py',183),
  ('cases -> CASE valor DOSPUNTOS NEWLINE impresionsencilla','cases',5,'p_cases','golangsintax.py',189),
  ('cases -> DEFAULT DOSPUNTOS NEWLINE impresionsencilla','cases',4,'p_cases','golangsintax.py',190),
  ('valor -> condicion','valor',1,'p_valor','golangsintax.py',195),
  ('valor -> VARIABLE','valor',1,'p_valor','golangsintax.py',196),
  ('valor -> TRUE','valor',1,'p_valor','golangsintax.py',197),
  ('valor -> FALSE','valor',1,'p_valor','golangsintax.py',198),
  ('condicion -> tipodedato comparacion tipodedato','condicion',3,'p_condicion','golangsintax.py',204),
  ('condicion -> tipodedato comparacion VARIABLE','condicion',3,'p_condicion','golangsintax.py',205),
  ('condicion -> VARIABLE comparacion VARIABLE','condicion',3,'p_condicion','golangsintax.py',206),
  ('condicion -> condicion logical condicion','condicion',3,'p_condicion','golangsintax.py',207),
  ('expFloat -> FLOAT','expFloat',1,'p_expFloat','golangsintax.py',213),
  ('expFloat -> VARIABLE','expFloat',1,'p_expFloat','golangsintax.py',214),
  ('expFloat -> FLOAT signo expFloat','expFloat',3,'p_expFloat','golangsintax.py',215),
  ('expFloat -> VARIABLE signo expFloat','expFloat',3,'p_expFloat','golangsintax.py',216),
  ('cabecerafunction -> FUNCION VARIABLE PARENTESISI arguments PARENTESISD','cabecerafunction',5,'p_cabecerafunction','golangsintax.py',222),
  ('arguments -> argument COMA argument','arguments',3,'p_arguments','golangsintax.py',227),
  ('arguments -> argument','arguments',1,'p_arguments','golangsintax.py',228),
  ('argument -> VARIABLE dato','argument',2,'p_argument','golangsintax.py',233),
  ('slicevacio -> VAR VARIABLE CORCHETEI CORCHETED dato','slicevacio',5,'p_slicevacio','golangsintax.py',237),
  ('dato -> INTTYPE','dato',1,'p_dato','golangsintax.py',243),
  ('dato -> FLOATTYPE','dato',1,'p_dato','golangsintax.py',244),
  ('dato -> BOOLEANTYPE','dato',1,'p_dato','golangsintax.py',245),
  ('dato -> STRINGTYPE','dato',1,'p_dato','golangsintax.py',246),
  ('expEntero -> INTEGER','expEntero',1,'p_expEntero','golangsintax.py',251),
  ('expEntero -> INTEGER signo expEntero','expEntero',3,'p_expEntero','golangsintax.py',252),
  ('expEntero -> VARIABLE','expEntero',1,'p_expEntero','golangsintax.py',253),
  ('signo -> PLUS','signo',1,'p_signo','golangsintax.py',259),
  ('signo -> MINUS','signo',1,'p_signo','golangsintax.py',260),
  ('signo -> TIMES','signo',1,'p_signo','golangsintax.py',261),
  ('signo -> DIVIDE','signo',1,'p_signo','golangsintax.py',262),
  ('signo -> MODULE','signo',1,'p_signo','golangsintax.py',263),
  ('logical -> AND','logical',1,'p_logical','golangsintax.py',269),
  ('logical -> OR','logical',1,'p_logical','golangsintax.py',270),
  ('logical -> NOT','logical',1,'p_logical','golangsintax.py',271),
  ('slice -> VARIABLE','slice',1,'p_slice','golangsintax.py',277),
  ('comparacion -> EQUAL','comparacion',1,'p_comparacion','golangsintax.py',283),
  ('comparacion -> UNEQUAL','comparacion',1,'p_comparacion','golangsintax.py',284),
  ('comparacion -> GREATERTHAN','comparacion',1,'p_comparacion','golangsintax.py',285),
  ('comparacion -> SMALLERTHAN','comparacion',1,'p_comparacion','golangsintax.py',286),
  ('comparacion -> GREATEROREQUALTHAN','comparacion',1,'p_comparacion','golangsintax.py',287),
  ('comparacion -> SMALLEROREQUALTHAN','comparacion',1,'p_comparacion','golangsintax.py',288),
  ('declaracionBool -> VAR VARIABLE BOOLEANTYPE','declaracionBool',3,'p_declaracionBool','golangsintax.py',293),
  ('declaracionBool -> VARIABLE DSHORTVAR','declaracionBool',2,'p_declaracionBool','golangsintax.py',294),
  ('declaracionBool -> VAR VARIABLE','declaracionBool',2,'p_declaracionBool','golangsintax.py',295),
  ('expBool -> TRUE','expBool',1,'p_expBool','golangsintax.py',300),
  ('expBool -> FALSE','expBool',1,'p_expBool','golangsintax.py',301),
  ('declaracionFloat -> VAR VARIABLE FLOATTYPE','declaracionFloat',3,'p_declaracionFloat','golangsintax.py',306),
  ('declaracionFloat -> VARIABLE DSHORTVAR','declaracionFloat',2,'p_declaracionFloat','golangsintax.py',307),
  ('declaracionFloat -> VAR VARIABLE','declaracionFloat',2,'p_declaracionFloat','golangsintax.py',308),
  ('declaracionEntero -> VAR VARIABLE INTTYPE','declaracionEntero',3,'p_declaracionEntero','golangsintax.py',313),
  ('declaracionEntero -> VARIABLE DSHORTVAR','declaracionEntero',2,'p_declaracionEntero','golangsintax.py',314),
  ('declaracionEntero -> VAR VARIABLE','declaracionEntero',2,'p_declaracionEntero','golangsintax.py',315),
  ('listaFront -> VARIABLE PUNTO FRONT PARENTESISI PARENTESISD','listaFront',5,'p_listaFront','golangsintax.py',323),
  ('tipodedato -> STRING','tipodedato',1,'p_tipodedato','golangsintax.py',329),
  ('tipodedato -> INTEGER','tipodedato',1,'p_tipodedato','golangsintax.py',330),
  ('tipodedato -> FLOAT','tipodedato',1,'p_tipodedato','golangsintax.py',331),
  ('tipodedato -> VARIABLE','tipodedato',1,'p_tipodedato','golangsintax.py',332),
  ('lecturaSscanf -> FMT PUNTO SSCANF PARENTESISI STRING COMA STRING COMA AMPERSON VARIABLE PARENTESISD','lecturaSscanf',11,'p_lecturaSscanf','golangsintax.py',338),
  ('tipoimpresion -> FMT PUNTO PRINT','tipoimpresion',3,'p_tipoimpresion','golangsintax.py',343),
  ('tipoimpresion -> FMT PUNTO PRINTLN','tipoimpresion',3,'p_tipoimpresion','golangsintax.py',344),
  ('lecturaScanf -> FMT PUNTO SCANF PARENTESISI STRING COMA AMPERSON VARIABLE PARENTESISD','lecturaScanf',9,'p_lecturaScanf','golangsintax.py',351),
  ('listaDeclaracion -> VARIABLE DSHORTVAR LIST PUNTO NEW PARENTESISI PARENTESISD','listaDeclaracion',7,'p_listaDeclaracion','golangsintax.py',357),
]
