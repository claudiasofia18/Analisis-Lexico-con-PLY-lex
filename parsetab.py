
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSON AND APPEND ASSIGN BOOLEANTYPE BRACEL BRACER BRACKETL BRACKETR BREAK BUFIO CAP CASE CHAN COLON COMA CONST DECREMENT DEFAULT DEFER DIVIDE DOT ELSE EQUAL ERROR FALLTHROUGH FALSE FLOAT FLOATTYPE FMT FOR FPRINT FRONT FUNCION GO GOTO GREATEROREQUALTHAN GREATERTHAN IF IMPORT INCREMENT INTEGER INTERFACE INTTYPE LEN LIST LOCKL LOCKR MAP MINUS MODULE NEW NEWREADER NEWWRITER NOT OR OS PACKAGE PLUS PRINT PRINTF PRINTLN PUSHBACK RANGE READSTRING RETURN SCANF SELECT SEMICOLON SHORTASSIGN SMALLEROREQUALTHAN SMALLERTHAN SSCANF STDIN STDOUT STRING STRINGTYPE STRUCT SWITCH TIMES TRUE TYPE UNEQUAL VAR VARIABLEmain : ejecutable\n            | ejecutable main\n    ejecutable : estructuraControl\n                  | impresion\n                  | declaracion\n                  | asignacion\n                  | lectura\n    impresion : impresionSencilla\n                  | impresionBufio\n                  | impresionFormato\n    lectura : lecturaReader\n               | lecturaScanf\n               | lecturaSscanfasignacion : varShortAssign asignable\n                  | varAssign ASSIGN asignable\n                  | VARIABLE ASSIGN asignable\n                  | varAssign tipoDato ASSIGN asignable\n    declaracion : varAssign tipoDato\n    asignable : valor\n                 | expresionMatematica\n                 | condicionestructuraControl : SWITCH VARIABLE LOCKL cases LOCKR\n    estructuraControl : FOR condicion LOCKL main LOCKR\n    estructuraControl : FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR\n    estructuraControl : FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR\n                         | FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR\n    cases : case\n             | case cases\n    case : CASE condicionCase COLON main\n    impresionSencilla : tipoImpresion BRACKETL valores BRACKETR\n     tipoImpresion : FMT DOT PRINT\n                     | FMT DOT PRINTLN\n    impresionBufio : FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR impresionFormato : FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETRlecturaReader : varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR lecturaScanf : FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR opcionLectura : COMA opciones\n                     | COMA opciones opcionLectura  \n    ampersand : AMPERSON VARIABLElecturaSscanf : FMT DOT SSCANF BRACKETL opcionesLectura BRACKETRopcionesLectura : opciones \n                       | opciones COMA opcionesLectura opciones : STRING\n                | ampersanddeclaracion : varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETRdeclaracion : varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR\n    varShortAssign : VARIABLE SHORTASSIGN \n    \n    varAssign : VAR VARIABLE\n    condicionCase : INTEGER\n                     | VARIABLE\n                     | condicion\n    condicion : valor operadorComparacion valor\n                 | valor operadorLogico valor\n    operadorComparacion : EQUAL\n                           | UNEQUAL\n                           | GREATERTHAN\n                           | SMALLERTHAN\n                           | GREATEROREQUALTHAN\n                           | SMALLEROREQUALTHAN\n    tipoDato : INTTYPE\n                | FLOATTYPE\n                | BOOLEANTYPE operadorLogico : AND\n                       | OR\n                       | NOT\n    expresionMatematica : factor operadorMatematico factor\n    operadorMatematico : PLUS\n                          | MINUS\n                          | TIMES\n                          | DIVIDE\n                          | MODULE\n    valores : valor\n               | valor COMA valores\n    valor : STRING\n             | factor\n    factor : VARIABLE\n              | FLOAT\n              | INTEGER\n              \n    iterador : VARIABLE INCREMENT\n                | VARIABLE DECREMENT\n   '
    
_lr_action_items = {'SWITCH':([0,2,3,4,5,6,7,12,13,14,16,17,18,32,33,34,35,37,38,39,40,41,42,43,45,46,47,52,53,54,79,96,97,101,102,103,109,115,118,131,143,147,150,151,154,157,164,165,167,168,169,170,],[8,8,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,-60,-61,-62,-76,-16,8,-15,-52,-53,-66,-17,-30,-22,-23,8,8,-40,8,8,-26,-35,-36,-33,-34,-24,-25,-45,-46,]),'FOR':([0,2,3,4,5,6,7,12,13,14,16,17,18,32,33,34,35,37,38,39,40,41,42,43,45,46,47,52,53,54,79,96,97,101,102,103,109,115,118,131,143,147,150,151,154,157,164,165,167,168,169,170,],[10,10,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,-60,-61,-62,-76,-16,10,-15,-52,-53,-66,-17,-30,-22,-23,10,10,-40,10,10,-26,-35,-36,-33,-34,-24,-25,-45,-46,]),'VARIABLE':([0,2,3,4,5,6,7,8,10,11,12,13,14,16,17,18,21,24,25,29,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,78,79,90,96,97,101,102,103,104,105,109,115,116,117,118,130,131,140,143,147,150,151,154,157,164,165,167,168,169,170,],[9,9,-3,-4,-5,-6,-7,23,28,38,-8,-9,-10,-11,-12,-13,50,52,-47,52,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,52,-60,-61,-62,52,-76,-16,9,52,93,95,52,52,-54,-55,-56,-57,-58,-59,-63,-64,-65,52,-67,-68,-69,-70,-71,52,-15,113,-52,-53,-66,-17,-30,52,123,-22,-23,133,134,9,145,9,52,-40,9,9,-26,-35,-36,-33,-34,-24,-25,-45,-46,]),'FMT':([0,2,3,4,5,6,7,12,13,14,16,17,18,32,33,34,35,37,38,39,40,41,42,43,45,46,47,52,53,54,79,96,97,101,102,103,109,115,118,131,143,147,150,151,154,157,164,165,167,168,169,170,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,-60,-61,-62,-76,-16,20,-15,-52,-53,-66,-17,-30,-22,-23,20,20,-40,20,20,-26,-35,-36,-33,-34,-24,-25,-45,-46,]),'VAR':([0,2,3,4,5,6,7,10,12,13,14,16,17,18,32,33,34,35,37,38,39,40,41,42,43,45,46,47,52,53,54,79,96,97,101,102,103,109,115,118,131,143,147,150,151,154,157,164,165,167,168,169,170,],[21,21,-3,-4,-5,-6,-7,21,-8,-9,-10,-11,-12,-13,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,-60,-61,-62,-76,-16,21,-15,-52,-53,-66,-17,-30,-22,-23,21,21,-40,21,21,-26,-35,-36,-33,-34,-24,-25,-45,-46,]),'$end':([1,2,3,4,5,6,7,12,13,14,16,17,18,22,32,33,34,35,37,38,39,40,41,42,43,45,46,47,52,53,79,96,97,101,102,103,109,115,143,151,154,157,164,165,167,168,169,170,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,-60,-61,-62,-76,-16,-15,-52,-53,-66,-17,-30,-22,-23,-40,-26,-35,-36,-33,-34,-24,-25,-45,-46,]),'LOCKR':([2,3,4,5,6,7,12,13,14,16,17,18,22,32,33,34,35,37,38,39,40,41,42,43,45,46,47,52,53,79,88,89,91,96,97,101,102,103,109,110,115,135,143,146,151,154,157,160,161,164,165,167,168,169,170,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,-60,-61,-62,-76,-16,-15,109,-27,115,-52,-53,-66,-17,-30,-22,-28,-23,151,-40,-29,-26,-35,-36,167,168,-33,-34,-24,-25,-45,-46,]),'CASE':([2,3,4,5,6,7,12,13,14,16,17,18,22,32,33,34,35,37,38,39,40,41,42,43,45,46,47,51,52,53,79,89,96,97,101,102,103,109,115,143,146,151,154,157,164,165,167,168,169,170,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-74,-75,-77,-78,-14,-76,-19,-20,-21,-75,-18,-60,-61,-62,90,-76,-16,-15,90,-52,-53,-66,-17,-30,-22,-23,-40,-29,-26,-35,-36,-33,-34,-24,-25,-45,-46,]),'ASSIGN':([9,15,28,31,43,45,46,47,50,69,],[24,44,24,44,78,-60,-61,-62,-48,78,]),'SHORTASSIGN':([9,28,93,],[25,25,25,]),'STRING':([10,11,24,25,29,44,48,55,58,59,60,61,62,63,64,65,66,67,68,78,90,104,106,107,108,121,139,140,142,144,],[32,32,32,-47,32,32,32,32,32,32,-54,-55,-56,-57,-58,-59,-63,-64,-65,32,32,32,124,125,128,138,155,32,128,128,]),'FLOAT':([10,11,24,25,29,44,48,55,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,78,90,104,140,],[34,34,34,-47,34,34,34,34,34,34,-54,-55,-56,-57,-58,-59,-63,-64,-65,34,-67,-68,-69,-70,-71,34,34,34,34,]),'INTEGER':([10,11,24,25,29,44,48,55,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,78,90,104,140,],[35,35,35,-47,35,35,35,35,35,35,-54,-55,-56,-57,-58,-59,-63,-64,-65,35,-67,-68,-69,-70,-71,35,112,35,35,]),'BUFIO':([11,25,],[36,-47,]),'INTTYPE':([15,31,50,],[45,45,-48,]),'FLOATTYPE':([15,31,50,],[46,46,-48,]),'BOOLEANTYPE':([15,31,50,],[47,47,-48,]),'BRACKETL':([19,82,83,84,85,86,87,98,99,100,],[48,105,106,107,108,-31,-32,119,120,121,]),'DOT':([20,36,38,136,137,],[49,70,71,152,153,]),'LOCKL':([23,26,32,33,34,35,52,95,96,97,132,134,148,149,],[51,54,-74,-75,-77,-78,-76,118,-52,-53,147,150,-79,-80,]),'RANGE':([25,29,94,],[-47,57,117,]),'SEMICOLON':([27,32,33,34,35,37,39,40,41,42,52,53,79,92,96,97,101,102,],[55,-74,-75,-77,-78,-14,-19,-20,-21,-75,-76,-16,-15,116,-52,-53,-66,-17,]),'COMA':([28,32,33,34,35,52,81,123,124,125,127,128,129,145,158,],[56,-74,-75,-77,-78,-76,104,139,140,142,144,-43,-44,-39,142,]),'EQUAL':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,60,-74,-75,-77,-78,-76,60,-75,-76,-78,-76,]),'UNEQUAL':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,61,-74,-75,-77,-78,-76,61,-75,-76,-78,-76,]),'GREATERTHAN':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,62,-74,-75,-77,-78,-76,62,-75,-76,-78,-76,]),'SMALLERTHAN':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,63,-74,-75,-77,-78,-76,63,-75,-76,-78,-76,]),'GREATEROREQUALTHAN':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,64,-74,-75,-77,-78,-76,64,-75,-76,-78,-76,]),'SMALLEROREQUALTHAN':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,65,-74,-75,-77,-78,-76,65,-75,-76,-78,-76,]),'AND':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,66,-74,-75,-77,-78,-76,66,-75,-76,-78,-76,]),'OR':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,67,-74,-75,-77,-78,-76,67,-75,-76,-78,-76,]),'NOT':([28,30,32,33,34,35,38,39,42,52,112,113,],[-76,68,-74,-75,-77,-78,-76,68,-75,-76,-78,-76,]),'BRACKETR':([32,33,34,35,52,80,81,122,126,127,128,129,138,141,145,155,156,158,159,162,163,166,],[-74,-75,-77,-78,-76,103,-72,-73,143,-41,-43,-44,154,157,-39,164,165,-37,-42,169,170,-38,]),'COLON':([32,33,34,35,52,96,97,111,112,113,114,],[-74,-75,-77,-78,-76,-52,-53,131,-49,-50,-51,]),'PLUS':([34,35,38,42,52,],[-77,-78,-76,73,-76,]),'MINUS':([34,35,38,42,52,],[-77,-78,-76,74,-76,]),'TIMES':([34,35,38,42,52,],[-77,-78,-76,75,-76,]),'DIVIDE':([34,35,38,42,52,],[-77,-78,-76,76,-76,]),'MODULE':([34,35,38,42,52,],[-77,-78,-76,77,-76,]),'FPRINT':([49,],[82,]),'PRINTF':([49,],[83,]),'SCANF':([49,],[84,]),'SSCANF':([49,],[85,]),'PRINT':([49,],[86,]),'PRINTLN':([49,],[87,]),'NEWREADER':([70,],[98,]),'NEWWRITER':([70,],[99,]),'READSTRING':([71,],[100,]),'AMPERSON':([108,142,144,],[130,130,130,]),'OS':([119,120,],[136,137,]),'INCREMENT':([133,],[148,]),'DECREMENT':([133,],[149,]),'STDIN':([152,],[162,]),'STDOUT':([153,],[163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,2,54,118,131,147,150,],[1,22,91,135,146,160,161,]),'ejecutable':([0,2,54,118,131,147,150,],[2,2,2,2,2,2,2,]),'estructuraControl':([0,2,54,118,131,147,150,],[3,3,3,3,3,3,3,]),'impresion':([0,2,54,118,131,147,150,],[4,4,4,4,4,4,4,]),'declaracion':([0,2,54,118,131,147,150,],[5,5,5,5,5,5,5,]),'asignacion':([0,2,10,54,118,131,147,150,],[6,6,27,6,6,6,6,6,]),'lectura':([0,2,54,118,131,147,150,],[7,7,7,7,7,7,7,]),'varShortAssign':([0,2,10,54,56,118,131,147,150,],[11,11,29,11,94,11,11,11,11,]),'impresionSencilla':([0,2,54,118,131,147,150,],[12,12,12,12,12,12,12,]),'impresionBufio':([0,2,54,118,131,147,150,],[13,13,13,13,13,13,13,]),'impresionFormato':([0,2,54,118,131,147,150,],[14,14,14,14,14,14,14,]),'varAssign':([0,2,10,54,118,131,147,150,],[15,15,31,15,15,15,15,15,]),'lecturaReader':([0,2,54,118,131,147,150,],[16,16,16,16,16,16,16,]),'lecturaScanf':([0,2,54,118,131,147,150,],[17,17,17,17,17,17,17,]),'lecturaSscanf':([0,2,54,118,131,147,150,],[18,18,18,18,18,18,18,]),'tipoImpresion':([0,2,54,118,131,147,150,],[19,19,19,19,19,19,19,]),'condicion':([10,11,24,29,44,55,78,90,],[26,41,41,41,41,92,41,114,]),'valor':([10,11,24,29,44,48,55,58,59,78,90,104,140,],[30,39,39,39,39,81,30,96,97,39,30,81,81,]),'factor':([10,11,24,29,44,48,55,58,59,72,78,90,104,140,],[33,42,42,42,42,33,33,33,33,101,42,33,33,33,]),'asignable':([11,24,29,44,78,],[37,53,37,79,102,]),'expresionMatematica':([11,24,29,44,78,],[40,40,40,40,40,]),'tipoDato':([15,31,],[43,69,]),'operadorComparacion':([30,39,],[58,58,]),'operadorLogico':([30,39,],[59,59,]),'operadorMatematico':([42,],[72,]),'valores':([48,104,140,],[80,122,156,]),'cases':([51,89,],[88,110,]),'case':([51,89,],[89,89,]),'condicionCase':([90,],[111,]),'opcionesLectura':([108,144,],[126,159,]),'opciones':([108,142,144,],[127,158,127,]),'ampersand':([108,142,144,],[129,129,129,]),'iterador':([116,],[132,]),'opcionLectura':([125,158,],[141,166,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> ejecutable','main',1,'p_main','golangsintax.py',26),
  ('main -> ejecutable main','main',2,'p_main','golangsintax.py',27),
  ('ejecutable -> estructuraControl','ejecutable',1,'p_ejecutable','golangsintax.py',31),
  ('ejecutable -> impresion','ejecutable',1,'p_ejecutable','golangsintax.py',32),
  ('ejecutable -> declaracion','ejecutable',1,'p_ejecutable','golangsintax.py',33),
  ('ejecutable -> asignacion','ejecutable',1,'p_ejecutable','golangsintax.py',34),
  ('ejecutable -> lectura','ejecutable',1,'p_ejecutable','golangsintax.py',35),
  ('impresion -> impresionSencilla','impresion',1,'p_impresion','golangsintax.py',39),
  ('impresion -> impresionBufio','impresion',1,'p_impresion','golangsintax.py',40),
  ('impresion -> impresionFormato','impresion',1,'p_impresion','golangsintax.py',41),
  ('lectura -> lecturaReader','lectura',1,'p_lectura','golangsintax.py',45),
  ('lectura -> lecturaScanf','lectura',1,'p_lectura','golangsintax.py',46),
  ('lectura -> lecturaSscanf','lectura',1,'p_lectura','golangsintax.py',47),
  ('asignacion -> varShortAssign asignable','asignacion',2,'p_asignacion','golangsintax.py',50),
  ('asignacion -> varAssign ASSIGN asignable','asignacion',3,'p_asignacion','golangsintax.py',51),
  ('asignacion -> VARIABLE ASSIGN asignable','asignacion',3,'p_asignacion','golangsintax.py',52),
  ('asignacion -> varAssign tipoDato ASSIGN asignable','asignacion',4,'p_asignacion','golangsintax.py',53),
  ('declaracion -> varAssign tipoDato','declaracion',2,'p_declaracion_vartipo','golangsintax.py',57),
  ('asignable -> valor','asignable',1,'p_asignable','golangsintax.py',61),
  ('asignable -> expresionMatematica','asignable',1,'p_asignable','golangsintax.py',62),
  ('asignable -> condicion','asignable',1,'p_asignable','golangsintax.py',63),
  ('estructuraControl -> SWITCH VARIABLE LOCKL cases LOCKR','estructuraControl',5,'p_estructuraControl_switch','golangsintax.py',66),
  ('estructuraControl -> FOR condicion LOCKL main LOCKR','estructuraControl',5,'p_estructuraControl_forCondicion','golangsintax.py',70),
  ('estructuraControl -> FOR asignacion SEMICOLON condicion SEMICOLON iterador LOCKL main LOCKR','estructuraControl',9,'p_estructuraControl_forEstandar','golangsintax.py',74),
  ('estructuraControl -> FOR VARIABLE COMA varShortAssign RANGE VARIABLE LOCKL main LOCKR','estructuraControl',9,'p_estructuraControl_forRange','golangsintax.py',78),
  ('estructuraControl -> FOR varShortAssign RANGE VARIABLE LOCKL main LOCKR','estructuraControl',7,'p_estructuraControl_forRange','golangsintax.py',79),
  ('cases -> case','cases',1,'p_cases','golangsintax.py',83),
  ('cases -> case cases','cases',2,'p_cases','golangsintax.py',84),
  ('case -> CASE condicionCase COLON main','case',4,'p_case','golangsintax.py',88),
  ('impresionSencilla -> tipoImpresion BRACKETL valores BRACKETR','impresionSencilla',4,'p_impresionSencilla','golangsintax.py',92),
  ('tipoImpresion -> FMT DOT PRINT','tipoImpresion',3,'p_tipoImpresion','golangsintax.py',96),
  ('tipoImpresion -> FMT DOT PRINTLN','tipoImpresion',3,'p_tipoImpresion','golangsintax.py',97),
  ('impresionBufio -> FMT DOT FPRINT BRACKETL VARIABLE COMA STRING BRACKETR','impresionBufio',8,'p_impresionBufio','golangsintax.py',100),
  ('impresionFormato -> FMT DOT PRINTF BRACKETL STRING COMA valores BRACKETR','impresionFormato',8,'p_impresionFormato','golangsintax.py',103),
  ('lecturaReader -> varShortAssign VARIABLE DOT READSTRING BRACKETL STRING BRACKETR','lecturaReader',7,'p_lecturaReader','golangsintax.py',107),
  ('lecturaScanf -> FMT DOT SCANF BRACKETL STRING opcionLectura BRACKETR','lecturaScanf',7,'p_lecturaScanf','golangsintax.py',110),
  ('opcionLectura -> COMA opciones','opcionLectura',2,'p_opcionLectura','golangsintax.py',113),
  ('opcionLectura -> COMA opciones opcionLectura','opcionLectura',3,'p_opcionLectura','golangsintax.py',114),
  ('ampersand -> AMPERSON VARIABLE','ampersand',2,'p_ampersand','golangsintax.py',118),
  ('lecturaSscanf -> FMT DOT SSCANF BRACKETL opcionesLectura BRACKETR','lecturaSscanf',6,'p_lecturaSscanf','golangsintax.py',121),
  ('opcionesLectura -> opciones','opcionesLectura',1,'p_opcionesLectura','golangsintax.py',124),
  ('opcionesLectura -> opciones COMA opcionesLectura','opcionesLectura',3,'p_opcionesLectura','golangsintax.py',125),
  ('opciones -> STRING','opciones',1,'p_opciones','golangsintax.py',128),
  ('opciones -> ampersand','opciones',1,'p_opciones','golangsintax.py',129),
  ('declaracion -> varShortAssign BUFIO DOT NEWREADER BRACKETL OS DOT STDIN BRACKETR','declaracion',9,'p_declaracion_newReader','golangsintax.py',132),
  ('declaracion -> varShortAssign BUFIO DOT NEWWRITER BRACKETL OS DOT STDOUT BRACKETR','declaracion',9,'p_declaracion_newWriter','golangsintax.py',135),
  ('varShortAssign -> VARIABLE SHORTASSIGN','varShortAssign',2,'p_varShortAssign','golangsintax.py',140),
  ('varAssign -> VAR VARIABLE','varAssign',2,'p_varAssign','golangsintax.py',146),
  ('condicionCase -> INTEGER','condicionCase',1,'p_condicionCase','golangsintax.py',150),
  ('condicionCase -> VARIABLE','condicionCase',1,'p_condicionCase','golangsintax.py',151),
  ('condicionCase -> condicion','condicionCase',1,'p_condicionCase','golangsintax.py',152),
  ('condicion -> valor operadorComparacion valor','condicion',3,'p_condicion','golangsintax.py',156),
  ('condicion -> valor operadorLogico valor','condicion',3,'p_condicion','golangsintax.py',157),
  ('operadorComparacion -> EQUAL','operadorComparacion',1,'p_operadorComparacion','golangsintax.py',161),
  ('operadorComparacion -> UNEQUAL','operadorComparacion',1,'p_operadorComparacion','golangsintax.py',162),
  ('operadorComparacion -> GREATERTHAN','operadorComparacion',1,'p_operadorComparacion','golangsintax.py',163),
  ('operadorComparacion -> SMALLERTHAN','operadorComparacion',1,'p_operadorComparacion','golangsintax.py',164),
  ('operadorComparacion -> GREATEROREQUALTHAN','operadorComparacion',1,'p_operadorComparacion','golangsintax.py',165),
  ('operadorComparacion -> SMALLEROREQUALTHAN','operadorComparacion',1,'p_operadorComparacion','golangsintax.py',166),
  ('tipoDato -> INTTYPE','tipoDato',1,'p_tipoDato','golangsintax.py',169),
  ('tipoDato -> FLOATTYPE','tipoDato',1,'p_tipoDato','golangsintax.py',170),
  ('tipoDato -> BOOLEANTYPE','tipoDato',1,'p_tipoDato','golangsintax.py',171),
  ('operadorLogico -> AND','operadorLogico',1,'p_operadorLogico','golangsintax.py',173),
  ('operadorLogico -> OR','operadorLogico',1,'p_operadorLogico','golangsintax.py',174),
  ('operadorLogico -> NOT','operadorLogico',1,'p_operadorLogico','golangsintax.py',175),
  ('expresionMatematica -> factor operadorMatematico factor','expresionMatematica',3,'p_expresionMatematica','golangsintax.py',179),
  ('operadorMatematico -> PLUS','operadorMatematico',1,'p_operadorMatematico','golangsintax.py',183),
  ('operadorMatematico -> MINUS','operadorMatematico',1,'p_operadorMatematico','golangsintax.py',184),
  ('operadorMatematico -> TIMES','operadorMatematico',1,'p_operadorMatematico','golangsintax.py',185),
  ('operadorMatematico -> DIVIDE','operadorMatematico',1,'p_operadorMatematico','golangsintax.py',186),
  ('operadorMatematico -> MODULE','operadorMatematico',1,'p_operadorMatematico','golangsintax.py',187),
  ('valores -> valor','valores',1,'p_valores','golangsintax.py',191),
  ('valores -> valor COMA valores','valores',3,'p_valores','golangsintax.py',192),
  ('valor -> STRING','valor',1,'p_valor','golangsintax.py',196),
  ('valor -> factor','valor',1,'p_valor','golangsintax.py',197),
  ('factor -> VARIABLE','factor',1,'p_factor','golangsintax.py',201),
  ('factor -> FLOAT','factor',1,'p_factor','golangsintax.py',202),
  ('factor -> INTEGER','factor',1,'p_factor','golangsintax.py',203),
  ('iterador -> VARIABLE INCREMENT','iterador',2,'p_iterador','golangsintax.py',208),
  ('iterador -> VARIABLE DECREMENT','iterador',2,'p_iterador','golangsintax.py',209),
]
